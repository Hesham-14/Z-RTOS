
U15_Z-RTOS_Session_2.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b4c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08000c7c  08000c7c  00010c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ca0  08000ca0  00010ca8  2**0
                  CONTENTS
  4 .ARM          00000000  08000ca0  08000ca0  00010ca8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ca0  08000ca8  00010ca8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ca0  08000ca0  00010ca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ca4  08000ca4  00010ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010ca8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000048c  20000000  08000ca8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000048c  08000ca8  0002048c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010ca8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002ed8  00000000  00000000  00010cd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000008bb  00000000  00000000  00013ba9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000008c4  00000000  00000000  00014464  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001a0  00000000  00000000  00014d28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000158  00000000  00000000  00014ec8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00004295  00000000  00000000  00015020  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00001f09  00000000  00000000  000192b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00012d30  00000000  00000000  0001b1be  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002deee  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000004e4  00000000  00000000  0002df6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000c64 	.word	0x08000c64

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000c64 	.word	0x08000c64

08000170 <strcmp>:
 8000170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000178:	2a01      	cmp	r2, #1
 800017a:	bf28      	it	cs
 800017c:	429a      	cmpcs	r2, r3
 800017e:	d0f7      	beq.n	8000170 <strcmp>
 8000180:	1ad0      	subs	r0, r2, r3
 8000182:	4770      	bx	lr

08000184 <Task1_fun>:

/**************************************************************
---------------------- Tasks Functions  ----------------------
***************************************************************/
void Task1_fun()
{
 8000184:	b480      	push	{r7}
 8000186:	af00      	add	r7, sp, #0
	while(1)
	{
		//Task 1 Code
		Task1LED ^= 1;
 8000188:	4b03      	ldr	r3, [pc, #12]	; (8000198 <Task1_fun+0x14>)
 800018a:	781b      	ldrb	r3, [r3, #0]
 800018c:	f083 0301 	eor.w	r3, r3, #1
 8000190:	b2da      	uxtb	r2, r3
 8000192:	4b01      	ldr	r3, [pc, #4]	; (8000198 <Task1_fun+0x14>)
 8000194:	701a      	strb	r2, [r3, #0]
 8000196:	e7f7      	b.n	8000188 <Task1_fun+0x4>
 8000198:	200000a8 	.word	0x200000a8

0800019c <Task2_fun>:
	}
}

void Task2_fun()
{
 800019c:	b480      	push	{r7}
 800019e:	af00      	add	r7, sp, #0
	while(1)
	{
		//Task 2 Code
		Task2LED ^= 1;
 80001a0:	4b03      	ldr	r3, [pc, #12]	; (80001b0 <Task2_fun+0x14>)
 80001a2:	781b      	ldrb	r3, [r3, #0]
 80001a4:	f083 0301 	eor.w	r3, r3, #1
 80001a8:	b2da      	uxtb	r2, r3
 80001aa:	4b01      	ldr	r3, [pc, #4]	; (80001b0 <Task2_fun+0x14>)
 80001ac:	701a      	strb	r2, [r3, #0]
 80001ae:	e7f7      	b.n	80001a0 <Task2_fun+0x4>
 80001b0:	20000060 	.word	0x20000060

080001b4 <Task3_fun>:
	}
}

void Task3_fun()
{
 80001b4:	b480      	push	{r7}
 80001b6:	af00      	add	r7, sp, #0
	while(1)
	{
		//Task 2 Code
		Task3LED ^= 1;
 80001b8:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <Task3_fun+0x14>)
 80001ba:	781b      	ldrb	r3, [r3, #0]
 80001bc:	f083 0301 	eor.w	r3, r3, #1
 80001c0:	b2da      	uxtb	r2, r3
 80001c2:	4b01      	ldr	r3, [pc, #4]	; (80001c8 <Task3_fun+0x14>)
 80001c4:	701a      	strb	r2, [r3, #0]
 80001c6:	e7f7      	b.n	80001b8 <Task3_fun+0x4>
 80001c8:	200000f0 	.word	0x200000f0

080001cc <main>:
	}
}

//priority inversion Example
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af00      	add	r7, sp, #0
	volatile RTOS_ERROR_t error;

	HAL_init();
 80001d2:	f000 f911 	bl	80003f8 <HAL_init>

	if(RTOS_init() != RTOS_OK)
 80001d6:	f000 fbcb 	bl	8000970 <RTOS_init>
 80001da:	4603      	mov	r3, r0
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d000      	beq.n	80001e2 <main+0x16>
		while(1);
 80001e0:	e7fe      	b.n	80001e0 <main+0x14>

	/* Initialize Tasks */
	Task1.StackSize = 1024;
 80001e2:	4b33      	ldr	r3, [pc, #204]	; (80002b0 <main+0xe4>)
 80001e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80001e8:	601a      	str	r2, [r3, #0]
	Task1.pTaskEntry = Task1_fun;
 80001ea:	4b31      	ldr	r3, [pc, #196]	; (80002b0 <main+0xe4>)
 80001ec:	4a31      	ldr	r2, [pc, #196]	; (80002b4 <main+0xe8>)
 80001ee:	629a      	str	r2, [r3, #40]	; 0x28
	Task1.Priority = 3;
 80001f0:	4b2f      	ldr	r3, [pc, #188]	; (80002b0 <main+0xe4>)
 80001f2:	2203      	movs	r2, #3
 80001f4:	625a      	str	r2, [r3, #36]	; 0x24
	strcpy(Task1.TaskName, "Task_1");
 80001f6:	4b30      	ldr	r3, [pc, #192]	; (80002b8 <main+0xec>)
 80001f8:	4a30      	ldr	r2, [pc, #192]	; (80002bc <main+0xf0>)
 80001fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80001fe:	6018      	str	r0, [r3, #0]
 8000200:	3304      	adds	r3, #4
 8000202:	8019      	strh	r1, [r3, #0]
 8000204:	3302      	adds	r3, #2
 8000206:	0c0a      	lsrs	r2, r1, #16
 8000208:	701a      	strb	r2, [r3, #0]

	Task2.StackSize = 1024;
 800020a:	4b2d      	ldr	r3, [pc, #180]	; (80002c0 <main+0xf4>)
 800020c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000210:	601a      	str	r2, [r3, #0]
	Task2.pTaskEntry = Task2_fun;
 8000212:	4b2b      	ldr	r3, [pc, #172]	; (80002c0 <main+0xf4>)
 8000214:	4a2b      	ldr	r2, [pc, #172]	; (80002c4 <main+0xf8>)
 8000216:	629a      	str	r2, [r3, #40]	; 0x28
	Task2.Priority = 3;
 8000218:	4b29      	ldr	r3, [pc, #164]	; (80002c0 <main+0xf4>)
 800021a:	2203      	movs	r2, #3
 800021c:	625a      	str	r2, [r3, #36]	; 0x24
	strcpy(Task2.TaskName, "Task_2");
 800021e:	4b2a      	ldr	r3, [pc, #168]	; (80002c8 <main+0xfc>)
 8000220:	4a2a      	ldr	r2, [pc, #168]	; (80002cc <main+0x100>)
 8000222:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000226:	6018      	str	r0, [r3, #0]
 8000228:	3304      	adds	r3, #4
 800022a:	8019      	strh	r1, [r3, #0]
 800022c:	3302      	adds	r3, #2
 800022e:	0c0a      	lsrs	r2, r1, #16
 8000230:	701a      	strb	r2, [r3, #0]

	Task3.StackSize = 1024;
 8000232:	4b27      	ldr	r3, [pc, #156]	; (80002d0 <main+0x104>)
 8000234:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000238:	601a      	str	r2, [r3, #0]
	Task3.pTaskEntry = Task3_fun;
 800023a:	4b25      	ldr	r3, [pc, #148]	; (80002d0 <main+0x104>)
 800023c:	4a25      	ldr	r2, [pc, #148]	; (80002d4 <main+0x108>)
 800023e:	629a      	str	r2, [r3, #40]	; 0x28
	Task3.Priority = 3;
 8000240:	4b23      	ldr	r3, [pc, #140]	; (80002d0 <main+0x104>)
 8000242:	2203      	movs	r2, #3
 8000244:	625a      	str	r2, [r3, #36]	; 0x24
	strcpy(Task3.TaskName, "Task_3");
 8000246:	4b24      	ldr	r3, [pc, #144]	; (80002d8 <main+0x10c>)
 8000248:	4a24      	ldr	r2, [pc, #144]	; (80002dc <main+0x110>)
 800024a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800024e:	6018      	str	r0, [r3, #0]
 8000250:	3304      	adds	r3, #4
 8000252:	8019      	strh	r1, [r3, #0]
 8000254:	3302      	adds	r3, #2
 8000256:	0c0a      	lsrs	r2, r1, #16
 8000258:	701a      	strb	r2, [r3, #0]

	error += RTOS_Create_Task(&Task1);
 800025a:	4815      	ldr	r0, [pc, #84]	; (80002b0 <main+0xe4>)
 800025c:	f000 fbc4 	bl	80009e8 <RTOS_Create_Task>
 8000260:	4603      	mov	r3, r0
 8000262:	461a      	mov	r2, r3
 8000264:	79fb      	ldrb	r3, [r7, #7]
 8000266:	b2db      	uxtb	r3, r3
 8000268:	4413      	add	r3, r2
 800026a:	b2db      	uxtb	r3, r3
 800026c:	71fb      	strb	r3, [r7, #7]
	error += RTOS_Create_Task(&Task2);
 800026e:	4814      	ldr	r0, [pc, #80]	; (80002c0 <main+0xf4>)
 8000270:	f000 fbba 	bl	80009e8 <RTOS_Create_Task>
 8000274:	4603      	mov	r3, r0
 8000276:	461a      	mov	r2, r3
 8000278:	79fb      	ldrb	r3, [r7, #7]
 800027a:	b2db      	uxtb	r3, r3
 800027c:	4413      	add	r3, r2
 800027e:	b2db      	uxtb	r3, r3
 8000280:	71fb      	strb	r3, [r7, #7]
	error += RTOS_Create_Task(&Task3);
 8000282:	4813      	ldr	r0, [pc, #76]	; (80002d0 <main+0x104>)
 8000284:	f000 fbb0 	bl	80009e8 <RTOS_Create_Task>
 8000288:	4603      	mov	r3, r0
 800028a:	461a      	mov	r2, r3
 800028c:	79fb      	ldrb	r3, [r7, #7]
 800028e:	b2db      	uxtb	r3, r3
 8000290:	4413      	add	r3, r2
 8000292:	b2db      	uxtb	r3, r3
 8000294:	71fb      	strb	r3, [r7, #7]

	// Activate Tasks
	RTOS_Activate_Task(&Task1);
 8000296:	4806      	ldr	r0, [pc, #24]	; (80002b0 <main+0xe4>)
 8000298:	f000 fbda 	bl	8000a50 <RTOS_Activate_Task>
	RTOS_Activate_Task(&Task2);
 800029c:	4808      	ldr	r0, [pc, #32]	; (80002c0 <main+0xf4>)
 800029e:	f000 fbd7 	bl	8000a50 <RTOS_Activate_Task>
	RTOS_Activate_Task(&Task3);
 80002a2:	480b      	ldr	r0, [pc, #44]	; (80002d0 <main+0x104>)
 80002a4:	f000 fbd4 	bl	8000a50 <RTOS_Activate_Task>

	// Start OS
	RTOS_StartOS();
 80002a8:	f000 fbe2 	bl	8000a70 <RTOS_StartOS>

	while (1)
 80002ac:	e7fe      	b.n	80002ac <main+0xe0>
 80002ae:	bf00      	nop
 80002b0:	2000001c 	.word	0x2000001c
 80002b4:	08000185 	.word	0x08000185
 80002b8:	20000020 	.word	0x20000020
 80002bc:	08000c7c 	.word	0x08000c7c
 80002c0:	200000ac 	.word	0x200000ac
 80002c4:	0800019d 	.word	0x0800019d
 80002c8:	200000b0 	.word	0x200000b0
 80002cc:	08000c84 	.word	0x08000c84
 80002d0:	20000064 	.word	0x20000064
 80002d4:	080001b5 	.word	0x080001b5
 80002d8:	20000068 	.word	0x20000068
 80002dc:	08000c8c 	.word	0x08000c8c

080002e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002e0:	480d      	ldr	r0, [pc, #52]	; (8000318 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002e2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002e4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002e8:	480c      	ldr	r0, [pc, #48]	; (800031c <LoopForever+0x6>)
  ldr r1, =_edata
 80002ea:	490d      	ldr	r1, [pc, #52]	; (8000320 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002ec:	4a0d      	ldr	r2, [pc, #52]	; (8000324 <LoopForever+0xe>)
  movs r3, #0
 80002ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002f0:	e002      	b.n	80002f8 <LoopCopyDataInit>

080002f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002f6:	3304      	adds	r3, #4

080002f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002fc:	d3f9      	bcc.n	80002f2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002fe:	4a0a      	ldr	r2, [pc, #40]	; (8000328 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000300:	4c0a      	ldr	r4, [pc, #40]	; (800032c <LoopForever+0x16>)
  movs r3, #0
 8000302:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000304:	e001      	b.n	800030a <LoopFillZerobss>

08000306 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000306:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000308:	3204      	adds	r2, #4

0800030a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800030a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800030c:	d3fb      	bcc.n	8000306 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800030e:	f000 fc85 	bl	8000c1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000312:	f7ff ff5b 	bl	80001cc <main>

08000316 <LoopForever>:

LoopForever:
    b LoopForever
 8000316:	e7fe      	b.n	8000316 <LoopForever>
  ldr   r0, =_estack
 8000318:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 800031c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000320:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000324:	08000ca8 	.word	0x08000ca8
  ldr r2, =_sbss
 8000328:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800032c:	2000048c 	.word	0x2000048c

08000330 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000330:	e7fe      	b.n	8000330 <ADC1_2_IRQHandler>
	...

08000334 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000334:	b480      	push	{r7}
 8000336:	b083      	sub	sp, #12
 8000338:	af00      	add	r7, sp, #0
 800033a:	4603      	mov	r3, r0
 800033c:	6039      	str	r1, [r7, #0]
 800033e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000344:	2b00      	cmp	r3, #0
 8000346:	db0a      	blt.n	800035e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000348:	683b      	ldr	r3, [r7, #0]
 800034a:	b2da      	uxtb	r2, r3
 800034c:	490c      	ldr	r1, [pc, #48]	; (8000380 <__NVIC_SetPriority+0x4c>)
 800034e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000352:	0152      	lsls	r2, r2, #5
 8000354:	b2d2      	uxtb	r2, r2
 8000356:	440b      	add	r3, r1
 8000358:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800035c:	e00a      	b.n	8000374 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800035e:	683b      	ldr	r3, [r7, #0]
 8000360:	b2da      	uxtb	r2, r3
 8000362:	4908      	ldr	r1, [pc, #32]	; (8000384 <__NVIC_SetPriority+0x50>)
 8000364:	79fb      	ldrb	r3, [r7, #7]
 8000366:	f003 030f 	and.w	r3, r3, #15
 800036a:	3b04      	subs	r3, #4
 800036c:	0152      	lsls	r2, r2, #5
 800036e:	b2d2      	uxtb	r2, r2
 8000370:	440b      	add	r3, r1
 8000372:	761a      	strb	r2, [r3, #24]
}
 8000374:	bf00      	nop
 8000376:	370c      	adds	r7, #12
 8000378:	46bd      	mov	sp, r7
 800037a:	bc80      	pop	{r7}
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop
 8000380:	e000e100 	.word	0xe000e100
 8000384:	e000ed00 	.word	0xe000ed00

08000388 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	3b01      	subs	r3, #1
 8000394:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000398:	d301      	bcc.n	800039e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800039a:	2301      	movs	r3, #1
 800039c:	e00f      	b.n	80003be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800039e:	4a0a      	ldr	r2, [pc, #40]	; (80003c8 <SysTick_Config+0x40>)
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	3b01      	subs	r3, #1
 80003a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003a6:	2107      	movs	r1, #7
 80003a8:	f04f 30ff 	mov.w	r0, #4294967295
 80003ac:	f7ff ffc2 	bl	8000334 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003b0:	4b05      	ldr	r3, [pc, #20]	; (80003c8 <SysTick_Config+0x40>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003b6:	4b04      	ldr	r3, [pc, #16]	; (80003c8 <SysTick_Config+0x40>)
 80003b8:	2207      	movs	r2, #7
 80003ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003bc:	2300      	movs	r3, #0
}
 80003be:	4618      	mov	r0, r3
 80003c0:	3708      	adds	r7, #8
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	e000e010 	.word	0xe000e010

080003cc <HardFault_Handler>:

/**************************************************************
---------------------- Handler Functions  ----------------------
 ***************************************************************/
void HardFault_Handler(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
	while(1);
 80003d0:	e7fe      	b.n	80003d0 <HardFault_Handler+0x4>

080003d2 <MemManage_Handler>:
}
void MemManage_Handler(void)
{
 80003d2:	b480      	push	{r7}
 80003d4:	af00      	add	r7, sp, #0
	while(1);
 80003d6:	e7fe      	b.n	80003d6 <MemManage_Handler+0x4>

080003d8 <BusFault_Handler>:
}
void BusFault_Handler(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
	while(1);
 80003dc:	e7fe      	b.n	80003dc <BusFault_Handler+0x4>

080003de <UsageFault_Handler>:
}
void UsageFault_Handler(void)
{
 80003de:	b480      	push	{r7}
 80003e0:	af00      	add	r7, sp, #0
	while(1);
 80003e2:	e7fe      	b.n	80003e2 <UsageFault_Handler+0x4>

080003e4 <SVC_Handler>:
}

__attribute ((naked)) void SVC_Handler ()
{
	// SWITCH_CPU_Accesslevel (privileged)
	__asm ("tst lr, #4 \n\t"
 80003e4:	f01e 0f04 	tst.w	lr, #4
 80003e8:	bf0c      	ite	eq
 80003ea:	f3ef 8008 	mrseq	r0, MSP
 80003ee:	f3ef 8a09 	mrsne	sl, PSP
 80003f2:	f000 ba75 	b.w	80008e0 <OS_SVC_Handler>
			"ITE EQ \n\t"	//To execute Thumb instructions conditionally, you can either use an IT instruction, or a conditional branch instruction
			"mrseq r0,MSP \n\t"
			"mrsne r10,PSP \n\t"
			"B OS_SVC_Handler");
}
 80003f6:	bf00      	nop

080003f8 <HAL_init>:

/**************************************************************
------------------ APIs Functions Definitions  -----------------
 ***************************************************************/
void HAL_init()
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
	/* Init HW */
	/* Clock Tree */
	/* RCC Default values makes CPU clock & SysTick Timer clock = 8 MHz */

	// Decrease PendSV interrupt priority to be smaller or equal to sysTick priority (=14)
	__NVIC_SetPriority(PendSV_IRQn, 15);
 80003fc:	210f      	movs	r1, #15
 80003fe:	f06f 0001 	mvn.w	r0, #1
 8000402:	f7ff ff97 	bl	8000334 <__NVIC_SetPriority>

}
 8000406:	bf00      	nop
 8000408:	bd80      	pop	{r7, pc}
	...

0800040c <Trigger_OS_PendSV>:

void Trigger_OS_PendSV()
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8000410:	4b04      	ldr	r3, [pc, #16]	; (8000424 <Trigger_OS_PendSV+0x18>)
 8000412:	685b      	ldr	r3, [r3, #4]
 8000414:	4a03      	ldr	r2, [pc, #12]	; (8000424 <Trigger_OS_PendSV+0x18>)
 8000416:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800041a:	6053      	str	r3, [r2, #4]
}
 800041c:	bf00      	nop
 800041e:	46bd      	mov	sp, r7
 8000420:	bc80      	pop	{r7}
 8000422:	4770      	bx	lr
 8000424:	e000ed00 	.word	0xe000ed00

08000428 <Start_Ticker>:
 * @param [in]	-
 * @retval 		- none
 * Note			-
 */
void Start_Ticker()
{
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
	SysTick_Config(8000);
 800042c:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8000430:	f7ff ffaa 	bl	8000388 <SysTick_Config>
}
 8000434:	bf00      	nop
 8000436:	bd80      	pop	{r7, pc}

08000438 <SysTick_Handler>:

/*************************************************************
------------------------ ISR Functions  -----------------------
 **************************************************************/
void SysTick_Handler(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0
	SysTickLED ^= 1;
 800043c:	4b06      	ldr	r3, [pc, #24]	; (8000458 <SysTick_Handler+0x20>)
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	f083 0301 	eor.w	r3, r3, #1
 8000444:	b2da      	uxtb	r2, r3
 8000446:	4b04      	ldr	r3, [pc, #16]	; (8000458 <SysTick_Handler+0x20>)
 8000448:	701a      	strb	r2, [r3, #0]

	//1. Determine Pcurrent & Pnext
	Decide_What_Next();
 800044a:	f000 f9f5 	bl	8000838 <Decide_What_Next>

	//2. Switch Context & restore
	Trigger_OS_PendSV();
 800044e:	f7ff ffdd 	bl	800040c <Trigger_OS_PendSV>
}
 8000452:	bf00      	nop
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	200000f1 	.word	0x200000f1

0800045c <PendSV_Handler>:

__attribute ((naked)) void PendSV_Handler()
{
	/* Save The Context of Current Task */
	// 1. Get the current task (current PSP from CPU Registers)
	OS_GET_PSP(S_OS_CONTROL.CurrentTask->Current_PSP);
 800045c:	4b6c      	ldr	r3, [pc, #432]	; (8000610 <PendSV_Handler+0x1b4>)
 800045e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000462:	f3ef 8009 	mrs	r0, PSP
 8000466:	4602      	mov	r2, r0
 8000468:	635a      	str	r2, [r3, #52]	; 0x34

	// 2. Use Current PSP to Store (r4:r11)
	S_OS_CONTROL.CurrentTask->Current_PSP--;
 800046a:	4b69      	ldr	r3, [pc, #420]	; (8000610 <PendSV_Handler+0x1b4>)
 800046c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000470:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000472:	3a04      	subs	r2, #4
 8000474:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("mov %0, r4 " : "=r" (*(S_OS_CONTROL.CurrentTask->Current_PSP)));
 8000476:	4b66      	ldr	r3, [pc, #408]	; (8000610 <PendSV_Handler+0x1b4>)
 8000478:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800047c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800047e:	4622      	mov	r2, r4
 8000480:	601a      	str	r2, [r3, #0]
	S_OS_CONTROL.CurrentTask->Current_PSP--;
 8000482:	4b63      	ldr	r3, [pc, #396]	; (8000610 <PendSV_Handler+0x1b4>)
 8000484:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000488:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800048a:	3a04      	subs	r2, #4
 800048c:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("mov %0, r5 " : "=r" (*(S_OS_CONTROL.CurrentTask->Current_PSP)));
 800048e:	4b60      	ldr	r3, [pc, #384]	; (8000610 <PendSV_Handler+0x1b4>)
 8000490:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000496:	462a      	mov	r2, r5
 8000498:	601a      	str	r2, [r3, #0]
	S_OS_CONTROL.CurrentTask->Current_PSP--;
 800049a:	4b5d      	ldr	r3, [pc, #372]	; (8000610 <PendSV_Handler+0x1b4>)
 800049c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004a2:	3a04      	subs	r2, #4
 80004a4:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("mov %0, r6 " : "=r" (*(S_OS_CONTROL.CurrentTask->Current_PSP)));
 80004a6:	4b5a      	ldr	r3, [pc, #360]	; (8000610 <PendSV_Handler+0x1b4>)
 80004a8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004ae:	4632      	mov	r2, r6
 80004b0:	601a      	str	r2, [r3, #0]
	S_OS_CONTROL.CurrentTask->Current_PSP--;
 80004b2:	4b57      	ldr	r3, [pc, #348]	; (8000610 <PendSV_Handler+0x1b4>)
 80004b4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004ba:	3a04      	subs	r2, #4
 80004bc:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("mov %0, r7 " : "=r" (*(S_OS_CONTROL.CurrentTask->Current_PSP)));
 80004be:	4b54      	ldr	r3, [pc, #336]	; (8000610 <PendSV_Handler+0x1b4>)
 80004c0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004c6:	463a      	mov	r2, r7
 80004c8:	601a      	str	r2, [r3, #0]
	S_OS_CONTROL.CurrentTask->Current_PSP--;
 80004ca:	4b51      	ldr	r3, [pc, #324]	; (8000610 <PendSV_Handler+0x1b4>)
 80004cc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004d2:	3a04      	subs	r2, #4
 80004d4:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("mov %0, r8 " : "=r" (*(S_OS_CONTROL.CurrentTask->Current_PSP)));
 80004d6:	4b4e      	ldr	r3, [pc, #312]	; (8000610 <PendSV_Handler+0x1b4>)
 80004d8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004de:	4642      	mov	r2, r8
 80004e0:	601a      	str	r2, [r3, #0]
	S_OS_CONTROL.CurrentTask->Current_PSP--;
 80004e2:	4b4b      	ldr	r3, [pc, #300]	; (8000610 <PendSV_Handler+0x1b4>)
 80004e4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004ea:	3a04      	subs	r2, #4
 80004ec:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("mov %0, r9 " : "=r" (*(S_OS_CONTROL.CurrentTask->Current_PSP)));
 80004ee:	4b48      	ldr	r3, [pc, #288]	; (8000610 <PendSV_Handler+0x1b4>)
 80004f0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004f6:	464a      	mov	r2, r9
 80004f8:	601a      	str	r2, [r3, #0]
	S_OS_CONTROL.CurrentTask->Current_PSP--;
 80004fa:	4b45      	ldr	r3, [pc, #276]	; (8000610 <PendSV_Handler+0x1b4>)
 80004fc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000500:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000502:	3a04      	subs	r2, #4
 8000504:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("mov %0, r10 " : "=r" (*(S_OS_CONTROL.CurrentTask->Current_PSP)));
 8000506:	4b42      	ldr	r3, [pc, #264]	; (8000610 <PendSV_Handler+0x1b4>)
 8000508:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800050c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800050e:	4652      	mov	r2, sl
 8000510:	601a      	str	r2, [r3, #0]
	S_OS_CONTROL.CurrentTask->Current_PSP--;
 8000512:	4b3f      	ldr	r3, [pc, #252]	; (8000610 <PendSV_Handler+0x1b4>)
 8000514:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000518:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800051a:	3a04      	subs	r2, #4
 800051c:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("mov %0, r11 " : "=r" (*(S_OS_CONTROL.CurrentTask->Current_PSP)));
 800051e:	4b3c      	ldr	r3, [pc, #240]	; (8000610 <PendSV_Handler+0x1b4>)
 8000520:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000526:	465a      	mov	r2, fp
 8000528:	601a      	str	r2, [r3, #0]


	/* Restore the context of the next task */
	//1. Set next Task as Current task
	S_OS_CONTROL.CurrentTask = S_OS_CONTROL.NextTask;
 800052a:	4b39      	ldr	r3, [pc, #228]	; (8000610 <PendSV_Handler+0x1b4>)
 800052c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000530:	4a37      	ldr	r2, [pc, #220]	; (8000610 <PendSV_Handler+0x1b4>)
 8000532:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
	S_OS_CONTROL.NextTask = NULL;
 8000536:	4b36      	ldr	r3, [pc, #216]	; (8000610 <PendSV_Handler+0x1b4>)
 8000538:	2200      	movs	r2, #0
 800053a:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4

	//2. Restore Context for the task
	__asm volatile("mov r11,%0 " : : "r" (*(S_OS_CONTROL.CurrentTask->Current_PSP)));
 800053e:	4b34      	ldr	r3, [pc, #208]	; (8000610 <PendSV_Handler+0x1b4>)
 8000540:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	469b      	mov	fp, r3
	S_OS_CONTROL.CurrentTask->Current_PSP++;
 800054a:	4b31      	ldr	r3, [pc, #196]	; (8000610 <PendSV_Handler+0x1b4>)
 800054c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000550:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000552:	3204      	adds	r2, #4
 8000554:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("mov r10,%0 " : : "r" (*(S_OS_CONTROL.CurrentTask->Current_PSP)));
 8000556:	4b2e      	ldr	r3, [pc, #184]	; (8000610 <PendSV_Handler+0x1b4>)
 8000558:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800055c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	469a      	mov	sl, r3
	S_OS_CONTROL.CurrentTask->Current_PSP++;
 8000562:	4b2b      	ldr	r3, [pc, #172]	; (8000610 <PendSV_Handler+0x1b4>)
 8000564:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000568:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800056a:	3204      	adds	r2, #4
 800056c:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("mov r9,%0 " : : "r" (*(S_OS_CONTROL.CurrentTask->Current_PSP)));
 800056e:	4b28      	ldr	r3, [pc, #160]	; (8000610 <PendSV_Handler+0x1b4>)
 8000570:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4699      	mov	r9, r3
	S_OS_CONTROL.CurrentTask->Current_PSP++;
 800057a:	4b25      	ldr	r3, [pc, #148]	; (8000610 <PendSV_Handler+0x1b4>)
 800057c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000580:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000582:	3204      	adds	r2, #4
 8000584:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("mov r8,%0 " : : "r" (*(S_OS_CONTROL.CurrentTask->Current_PSP)));
 8000586:	4b22      	ldr	r3, [pc, #136]	; (8000610 <PendSV_Handler+0x1b4>)
 8000588:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800058c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4698      	mov	r8, r3
	S_OS_CONTROL.CurrentTask->Current_PSP++;
 8000592:	4b1f      	ldr	r3, [pc, #124]	; (8000610 <PendSV_Handler+0x1b4>)
 8000594:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000598:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800059a:	3204      	adds	r2, #4
 800059c:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("mov r7,%0 " : : "r" (*(S_OS_CONTROL.CurrentTask->Current_PSP)));
 800059e:	4b1c      	ldr	r3, [pc, #112]	; (8000610 <PendSV_Handler+0x1b4>)
 80005a0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80005a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	461f      	mov	r7, r3
	S_OS_CONTROL.CurrentTask->Current_PSP++;
 80005aa:	4b19      	ldr	r3, [pc, #100]	; (8000610 <PendSV_Handler+0x1b4>)
 80005ac:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80005b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005b2:	3204      	adds	r2, #4
 80005b4:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("mov r6,%0 " : : "r" (*(S_OS_CONTROL.CurrentTask->Current_PSP)));
 80005b6:	4b16      	ldr	r3, [pc, #88]	; (8000610 <PendSV_Handler+0x1b4>)
 80005b8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80005bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	461e      	mov	r6, r3
	S_OS_CONTROL.CurrentTask->Current_PSP++;
 80005c2:	4b13      	ldr	r3, [pc, #76]	; (8000610 <PendSV_Handler+0x1b4>)
 80005c4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80005c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005ca:	3204      	adds	r2, #4
 80005cc:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("mov r5,%0 " : : "r" (*(S_OS_CONTROL.CurrentTask->Current_PSP)));
 80005ce:	4b10      	ldr	r3, [pc, #64]	; (8000610 <PendSV_Handler+0x1b4>)
 80005d0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80005d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	461d      	mov	r5, r3
	S_OS_CONTROL.CurrentTask->Current_PSP++;
 80005da:	4b0d      	ldr	r3, [pc, #52]	; (8000610 <PendSV_Handler+0x1b4>)
 80005dc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80005e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005e2:	3204      	adds	r2, #4
 80005e4:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("mov r4,%0 " : : "r" (*(S_OS_CONTROL.CurrentTask->Current_PSP)));
 80005e6:	4b0a      	ldr	r3, [pc, #40]	; (8000610 <PendSV_Handler+0x1b4>)
 80005e8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80005ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	461c      	mov	r4, r3
	S_OS_CONTROL.CurrentTask->Current_PSP++;
 80005f2:	4b07      	ldr	r3, [pc, #28]	; (8000610 <PendSV_Handler+0x1b4>)
 80005f4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80005f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005fa:	3204      	adds	r2, #4
 80005fc:	635a      	str	r2, [r3, #52]	; 0x34

	//3. Update PSP and Exit
	OS_SET_PSP(S_OS_CONTROL.CurrentTask->Current_PSP);
 80005fe:	4b04      	ldr	r3, [pc, #16]	; (8000610 <PendSV_Handler+0x1b4>)
 8000600:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000606:	4618      	mov	r0, r3
 8000608:	f380 8809 	msr	PSP, r0
	__asm volatile ("BX LR");
 800060c:	4770      	bx	lr

}
 800060e:	bf00      	nop
 8000610:	20000298 	.word	0x20000298

08000614 <RTOS_Create_MainStack>:

	}
}

void RTOS_Create_MainStack(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
	S_OS_CONTROL._S_MSP_Task = &_estack;
 8000618:	4a0b      	ldr	r2, [pc, #44]	; (8000648 <RTOS_Create_MainStack+0x34>)
 800061a:	4b0c      	ldr	r3, [pc, #48]	; (800064c <RTOS_Create_MainStack+0x38>)
 800061c:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	S_OS_CONTROL._E_MSP_Task = S_OS_CONTROL._S_MSP_Task - MainStackSize;
 8000620:	4b0a      	ldr	r3, [pc, #40]	; (800064c <RTOS_Create_MainStack+0x38>)
 8000622:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8000626:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 800062a:	4a08      	ldr	r2, [pc, #32]	; (800064c <RTOS_Create_MainStack+0x38>)
 800062c:	f8c2 3194 	str.w	r3, [r2, #404]	; 0x194

	//Allign 8 Bytes spaces between Main Stack and PSP tasks
	S_OS_CONTROL.PSP_Task_Locator = (S_OS_CONTROL._E_MSP_Task - 8);
 8000630:	4b06      	ldr	r3, [pc, #24]	; (800064c <RTOS_Create_MainStack+0x38>)
 8000632:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8000636:	3b08      	subs	r3, #8
 8000638:	4a04      	ldr	r2, [pc, #16]	; (800064c <RTOS_Create_MainStack+0x38>)
 800063a:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

	/* Optional */
	// if(S_OS_CONTROL._E_MSP_Task  < &_eheap) Error: exceeded the available stack size
}
 800063e:	bf00      	nop
 8000640:	46bd      	mov	sp, r7
 8000642:	bc80      	pop	{r7}
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	20002800 	.word	0x20002800
 800064c:	20000298 	.word	0x20000298

08000650 <RTOS_Create_TaskStack>:


void RTOS_Create_TaskStack(Task_t* Tref)
{
 8000650:	b480      	push	{r7}
 8000652:	b085      	sub	sp, #20
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
	 * r8
	 * r9
	 * r10
	 * r11
	 */
	Tref->Current_PSP = Tref->_S_PSP_Task;
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800065c:	461a      	mov	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	635a      	str	r2, [r3, #52]	; 0x34

	Tref->Current_PSP--;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000666:	1f1a      	subs	r2, r3, #4
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	635a      	str	r2, [r3, #52]	; 0x34
	*(Tref->Current_PSP) = 0x1000000; //DUMMY XPSR: T = 1 to avoid Bus Fault
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000670:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000674:	601a      	str	r2, [r3, #0]

	Tref->Current_PSP--;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800067a:	1f1a      	subs	r2, r3, #4
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	635a      	str	r2, [r3, #52]	; 0x34
	*(Tref->Current_PSP) = (unsigned int) Tref->pTaskEntry; //PC
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000688:	601a      	str	r2, [r3, #0]

	Tref->Current_PSP--;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800068e:	1f1a      	subs	r2, r3, #4
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	635a      	str	r2, [r3, #52]	; 0x34
	*(Tref->Current_PSP) = 0xFFFFFFFD; //LR
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000698:	f06f 0202 	mvn.w	r2, #2
 800069c:	601a      	str	r2, [r3, #0]

	// ri
	for(int i=0; i<13; i++)
 800069e:	2300      	movs	r3, #0
 80006a0:	60fb      	str	r3, [r7, #12]
 80006a2:	e00b      	b.n	80006bc <RTOS_Create_TaskStack+0x6c>
	{
		Tref->Current_PSP--;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006a8:	1f1a      	subs	r2, r3, #4
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	635a      	str	r2, [r3, #52]	; 0x34
		*(Tref->Current_PSP) = 0; //LR
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
	for(int i=0; i<13; i++)
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	3301      	adds	r3, #1
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	2b0c      	cmp	r3, #12
 80006c0:	ddf0      	ble.n	80006a4 <RTOS_Create_TaskStack+0x54>
	}
}
 80006c2:	bf00      	nop
 80006c4:	3714      	adds	r7, #20
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bc80      	pop	{r7}
 80006ca:	4770      	bx	lr

080006cc <RTOS_IdleTask>:

void RTOS_IdleTask(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
	while(1)
	{
		IdleTaskLED ^= 1;
 80006d0:	4b04      	ldr	r3, [pc, #16]	; (80006e4 <RTOS_IdleTask+0x18>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	f083 0301 	eor.w	r3, r3, #1
 80006d8:	b2da      	uxtb	r2, r3
 80006da:	4b02      	ldr	r3, [pc, #8]	; (80006e4 <RTOS_IdleTask+0x18>)
 80006dc:	701a      	strb	r2, [r3, #0]
		__asm("NOP");
 80006de:	bf00      	nop
		IdleTaskLED ^= 1;
 80006e0:	e7f6      	b.n	80006d0 <RTOS_IdleTask+0x4>
 80006e2:	bf00      	nop
 80006e4:	20000444 	.word	0x20000444

080006e8 <Bubble_Sort>:
	}
}

/* Handler Mode */
void Bubble_Sort()
{
 80006e8:	b480      	push	{r7}
 80006ea:	b085      	sub	sp, #20
 80006ec:	af00      	add	r7, sp, #0
	unsigned int i,j,n;
	Task_t* temp;
	n = S_OS_CONTROL.NoofActiveTasks;
 80006ee:	4b21      	ldr	r3, [pc, #132]	; (8000774 <Bubble_Sort+0x8c>)
 80006f0:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 80006f4:	607b      	str	r3, [r7, #4]
	for(i = 0; i < n-1; i++)
 80006f6:	2300      	movs	r3, #0
 80006f8:	60fb      	str	r3, [r7, #12]
 80006fa:	e030      	b.n	800075e <Bubble_Sort+0x76>
		//Last i elements are already in place
		for(j=0; j<n-i-1; j++)
 80006fc:	2300      	movs	r3, #0
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	e023      	b.n	800074a <Bubble_Sort+0x62>
			if(S_OS_CONTROL.OSTasks[j]->Priority > S_OS_CONTROL.OSTasks[j+1]->Priority)
 8000702:	4a1c      	ldr	r2, [pc, #112]	; (8000774 <Bubble_Sort+0x8c>)
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800070a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	3301      	adds	r3, #1
 8000710:	4918      	ldr	r1, [pc, #96]	; (8000774 <Bubble_Sort+0x8c>)
 8000712:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000718:	429a      	cmp	r2, r3
 800071a:	d913      	bls.n	8000744 <Bubble_Sort+0x5c>
			{
				temp = S_OS_CONTROL.OSTasks[j];
 800071c:	4a15      	ldr	r2, [pc, #84]	; (8000774 <Bubble_Sort+0x8c>)
 800071e:	68bb      	ldr	r3, [r7, #8]
 8000720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000724:	603b      	str	r3, [r7, #0]
				S_OS_CONTROL.OSTasks[j] = S_OS_CONTROL.OSTasks[j+1];
 8000726:	68bb      	ldr	r3, [r7, #8]
 8000728:	3301      	adds	r3, #1
 800072a:	4a12      	ldr	r2, [pc, #72]	; (8000774 <Bubble_Sort+0x8c>)
 800072c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000730:	4910      	ldr	r1, [pc, #64]	; (8000774 <Bubble_Sort+0x8c>)
 8000732:	68bb      	ldr	r3, [r7, #8]
 8000734:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				S_OS_CONTROL.OSTasks[j+1] = temp;
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	3301      	adds	r3, #1
 800073c:	490d      	ldr	r1, [pc, #52]	; (8000774 <Bubble_Sort+0x8c>)
 800073e:	683a      	ldr	r2, [r7, #0]
 8000740:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(j=0; j<n-i-1; j++)
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	3301      	adds	r3, #1
 8000748:	60bb      	str	r3, [r7, #8]
 800074a:	687a      	ldr	r2, [r7, #4]
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	1ad3      	subs	r3, r2, r3
 8000750:	3b01      	subs	r3, #1
 8000752:	68ba      	ldr	r2, [r7, #8]
 8000754:	429a      	cmp	r2, r3
 8000756:	d3d4      	bcc.n	8000702 <Bubble_Sort+0x1a>
	for(i = 0; i < n-1; i++)
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	3301      	adds	r3, #1
 800075c:	60fb      	str	r3, [r7, #12]
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	3b01      	subs	r3, #1
 8000762:	68fa      	ldr	r2, [r7, #12]
 8000764:	429a      	cmp	r2, r3
 8000766:	d3c9      	bcc.n	80006fc <Bubble_Sort+0x14>
			}
}
 8000768:	bf00      	nop
 800076a:	3714      	adds	r7, #20
 800076c:	46bd      	mov	sp, r7
 800076e:	bc80      	pop	{r7}
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	20000298 	.word	0x20000298

08000778 <RTOS_Update_Schedular_Table>:

/* Handler Mode */
void RTOS_Update_Schedular_Table()
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
	int i=0;
 800077e:	2300      	movs	r3, #0
 8000780:	60fb      	str	r3, [r7, #12]
	Task_t* temp = NULL;
 8000782:	2300      	movs	r3, #0
 8000784:	603b      	str	r3, [r7, #0]
	Task_t* PTask;
	Task_t* PNextTask;

	//1. Bubble Sort OSTask[100] (Sch. Table) based on Priority
	Bubble_Sort();
 8000786:	f7ff ffaf 	bl	80006e8 <Bubble_Sort>

	//2. Free REQDY QUEUE
	while(FIFO_Dequeue(&Glob_Ready_Queue, &temp) != FIFO_EMPTY);
 800078a:	bf00      	nop
 800078c:	463b      	mov	r3, r7
 800078e:	4619      	mov	r1, r3
 8000790:	4827      	ldr	r0, [pc, #156]	; (8000830 <RTOS_Update_Schedular_Table+0xb8>)
 8000792:	f000 fa05 	bl	8000ba0 <FIFO_Dequeue>
 8000796:	4603      	mov	r3, r0
 8000798:	2b02      	cmp	r3, #2
 800079a:	d1f7      	bne.n	800078c <RTOS_Update_Schedular_Table+0x14>

	//3. Update READY QUEUE
	while(i < S_OS_CONTROL.NoofActiveTasks)
 800079c:	e03d      	b.n	800081a <RTOS_Update_Schedular_Table+0xa2>
	{
		PTask = S_OS_CONTROL.OSTasks[i];
 800079e:	4a25      	ldr	r2, [pc, #148]	; (8000834 <RTOS_Update_Schedular_Table+0xbc>)
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007a6:	60bb      	str	r3, [r7, #8]
		PNextTask = S_OS_CONTROL.OSTasks[i+1];
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	3301      	adds	r3, #1
 80007ac:	4a21      	ldr	r2, [pc, #132]	; (8000834 <RTOS_Update_Schedular_Table+0xbc>)
 80007ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007b2:	607b      	str	r3, [r7, #4]

		if(PTask->TaskState != Suspend)
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d02a      	beq.n	8000814 <RTOS_Update_Schedular_Table+0x9c>
		{
			// in case we reached to the end of available OSTasks or
			if(PNextTask->TaskState == Suspend)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d108      	bne.n	80007da <RTOS_Update_Schedular_Table+0x62>
			{
				FIFO_Enqueue(&Glob_Ready_Queue, PTask);
 80007c8:	68b9      	ldr	r1, [r7, #8]
 80007ca:	4819      	ldr	r0, [pc, #100]	; (8000830 <RTOS_Update_Schedular_Table+0xb8>)
 80007cc:	f000 f9a6 	bl	8000b1c <FIFO_Enqueue>
				PTask->TaskState = Ready;
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	2202      	movs	r2, #2
 80007d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
				// get out the loop
				break;
 80007d8:	e025      	b.n	8000826 <RTOS_Update_Schedular_Table+0xae>
			}
			// if the PTask priority higher than PNextTask
			if(PTask->Priority < PNextTask->Priority)
 80007da:	68bb      	ldr	r3, [r7, #8]
 80007dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007e2:	429a      	cmp	r2, r3
 80007e4:	d208      	bcs.n	80007f8 <RTOS_Update_Schedular_Table+0x80>
			{
				FIFO_Enqueue(&Glob_Ready_Queue, PTask);
 80007e6:	68b9      	ldr	r1, [r7, #8]
 80007e8:	4811      	ldr	r0, [pc, #68]	; (8000830 <RTOS_Update_Schedular_Table+0xb8>)
 80007ea:	f000 f997 	bl	8000b1c <FIFO_Enqueue>
				PTask->TaskState = Ready;
 80007ee:	68bb      	ldr	r3, [r7, #8]
 80007f0:	2202      	movs	r2, #2
 80007f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
				// get out the loop
				break;
 80007f6:	e016      	b.n	8000826 <RTOS_Update_Schedular_Table+0xae>
			}
			// both has the same priority
			else if(PTask->Priority == PNextTask->Priority)
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000800:	429a      	cmp	r2, r3
 8000802:	d107      	bne.n	8000814 <RTOS_Update_Schedular_Table+0x9c>
			{
				//	if the Ptask priority == nexttask then
				//		push Ptask to ready state
				//	And make the ptask = nexttask  and nexttask++
				FIFO_Enqueue(&Glob_Ready_Queue, PTask);
 8000804:	68b9      	ldr	r1, [r7, #8]
 8000806:	480a      	ldr	r0, [pc, #40]	; (8000830 <RTOS_Update_Schedular_Table+0xb8>)
 8000808:	f000 f988 	bl	8000b1c <FIFO_Enqueue>
				PTask->TaskState = Ready;
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	2202      	movs	r2, #2
 8000810:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			}
		}
		i++;
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	3301      	adds	r3, #1
 8000818:	60fb      	str	r3, [r7, #12]
	while(i < S_OS_CONTROL.NoofActiveTasks)
 800081a:	4b06      	ldr	r3, [pc, #24]	; (8000834 <RTOS_Update_Schedular_Table+0xbc>)
 800081c:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	429a      	cmp	r2, r3
 8000824:	d8bb      	bhi.n	800079e <RTOS_Update_Schedular_Table+0x26>
	}
}
 8000826:	bf00      	nop
 8000828:	3710      	adds	r7, #16
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	200000f4 	.word	0x200000f4
 8000834:	20000298 	.word	0x20000298

08000838 <Decide_What_Next>:

/* Handler Mode */
void Decide_What_Next()
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
	// 1. Check if QUEUE is EMBTY && CurrentTask State is suspended
	if(Glob_Ready_Queue.counter == 0 && S_OS_CONTROL.CurrentTask->TaskState != Suspend)
 800083c:	4b25      	ldr	r3, [pc, #148]	; (80008d4 <Decide_What_Next+0x9c>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d11a      	bne.n	800087a <Decide_What_Next+0x42>
 8000844:	4b24      	ldr	r3, [pc, #144]	; (80008d8 <Decide_What_Next+0xa0>)
 8000846:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800084a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800084e:	2b00      	cmp	r3, #0
 8000850:	d013      	beq.n	800087a <Decide_What_Next+0x42>
	{
		// So continue running the same Task
		S_OS_CONTROL.CurrentTask->TaskState = Running;
 8000852:	4b21      	ldr	r3, [pc, #132]	; (80008d8 <Decide_What_Next+0xa0>)
 8000854:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000858:	2203      	movs	r2, #3
 800085a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

		// Add the current task again to the QUEUE [Round Robin]
		FIFO_Enqueue(&Glob_Ready_Queue, S_OS_CONTROL.CurrentTask);
 800085e:	4b1e      	ldr	r3, [pc, #120]	; (80008d8 <Decide_What_Next+0xa0>)
 8000860:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000864:	4619      	mov	r1, r3
 8000866:	481b      	ldr	r0, [pc, #108]	; (80008d4 <Decide_What_Next+0x9c>)
 8000868:	f000 f958 	bl	8000b1c <FIFO_Enqueue>

		// Set Next task = Current task
		S_OS_CONTROL.NextTask = S_OS_CONTROL.CurrentTask;
 800086c:	4b1a      	ldr	r3, [pc, #104]	; (80008d8 <Decide_What_Next+0xa0>)
 800086e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000872:	4a19      	ldr	r2, [pc, #100]	; (80008d8 <Decide_What_Next+0xa0>)
 8000874:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
		{
			FIFO_Enqueue(&Glob_Ready_Queue, S_OS_CONTROL.CurrentTask);
			S_OS_CONTROL.CurrentTask->TaskState = Ready;
		}
	}
}
 8000878:	e029      	b.n	80008ce <Decide_What_Next+0x96>
		FIFO_Dequeue(&Glob_Ready_Queue, &S_OS_CONTROL.NextTask);
 800087a:	4918      	ldr	r1, [pc, #96]	; (80008dc <Decide_What_Next+0xa4>)
 800087c:	4815      	ldr	r0, [pc, #84]	; (80008d4 <Decide_What_Next+0x9c>)
 800087e:	f000 f98f 	bl	8000ba0 <FIFO_Dequeue>
		S_OS_CONTROL.NextTask->TaskState = Running;
 8000882:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <Decide_What_Next+0xa0>)
 8000884:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000888:	2203      	movs	r2, #3
 800088a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		if(S_OS_CONTROL.CurrentTask->TaskState == S_OS_CONTROL.NextTask->TaskState && S_OS_CONTROL.CurrentTask->TaskState != Suspend)
 800088e:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <Decide_What_Next+0xa0>)
 8000890:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000894:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8000898:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <Decide_What_Next+0xa0>)
 800089a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800089e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80008a2:	429a      	cmp	r2, r3
 80008a4:	d113      	bne.n	80008ce <Decide_What_Next+0x96>
 80008a6:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <Decide_What_Next+0xa0>)
 80008a8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d00c      	beq.n	80008ce <Decide_What_Next+0x96>
			FIFO_Enqueue(&Glob_Ready_Queue, S_OS_CONTROL.CurrentTask);
 80008b4:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <Decide_What_Next+0xa0>)
 80008b6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008ba:	4619      	mov	r1, r3
 80008bc:	4805      	ldr	r0, [pc, #20]	; (80008d4 <Decide_What_Next+0x9c>)
 80008be:	f000 f92d 	bl	8000b1c <FIFO_Enqueue>
			S_OS_CONTROL.CurrentTask->TaskState = Ready;
 80008c2:	4b05      	ldr	r3, [pc, #20]	; (80008d8 <Decide_What_Next+0xa0>)
 80008c4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008c8:	2202      	movs	r2, #2
 80008ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	200000f4 	.word	0x200000f4
 80008d8:	20000298 	.word	0x20000298
 80008dc:	2000043c 	.word	0x2000043c

080008e0 <OS_SVC_Handler>:

/* Handler Mode */
void OS_SVC_Handler(int* StackFrame)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
	unsigned char SVC_number;
	//1. Get SVC Number
	SVC_number = *((unsigned char*)(((unsigned char*)StackFrame[6]) - 2));
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	3318      	adds	r3, #24
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	3b02      	subs	r3, #2
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	73fb      	strb	r3, [r7, #15]
	 * i) update Scheduler Table, Read Queue
	 * ii) Check if OS is Running State
	 * 		- Decide what State
	 * 		- Trigger OS_pendSV (Switch Context/Restore)
	 */
	switch(SVC_number)
 80008f4:	7bfb      	ldrb	r3, [r7, #15]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	db1a      	blt.n	8000930 <OS_SVC_Handler+0x50>
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	dd01      	ble.n	8000902 <OS_SVC_Handler+0x22>
 80008fe:	2b02      	cmp	r3, #2
			}
		}
		break;
	}
	case SVC_TaskWaitingTime:
		break;
 8000900:	e016      	b.n	8000930 <OS_SVC_Handler+0x50>
		RTOS_Update_Schedular_Table();
 8000902:	f7ff ff39 	bl	8000778 <RTOS_Update_Schedular_Table>
		if(S_OS_CONTROL.OSModeID == OSrunning)
 8000906:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <OS_SVC_Handler+0x58>)
 8000908:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
 800090c:	2b01      	cmp	r3, #1
 800090e:	d10e      	bne.n	800092e <OS_SVC_Handler+0x4e>
			if(strcmp(S_OS_CONTROL.CurrentTask->TaskName, "IdleTask") != 0)
 8000910:	4b09      	ldr	r3, [pc, #36]	; (8000938 <OS_SVC_Handler+0x58>)
 8000912:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000916:	3304      	adds	r3, #4
 8000918:	4908      	ldr	r1, [pc, #32]	; (800093c <OS_SVC_Handler+0x5c>)
 800091a:	4618      	mov	r0, r3
 800091c:	f7ff fc28 	bl	8000170 <strcmp>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d003      	beq.n	800092e <OS_SVC_Handler+0x4e>
				Decide_What_Next();
 8000926:	f7ff ff87 	bl	8000838 <Decide_What_Next>
				Trigger_OS_PendSV();
 800092a:	f7ff fd6f 	bl	800040c <Trigger_OS_PendSV>
		break;
 800092e:	bf00      	nop
	}
}
 8000930:	bf00      	nop
 8000932:	3710      	adds	r7, #16
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	20000298 	.word	0x20000298
 800093c:	08000c94 	.word	0x08000c94

08000940 <RTOS_OS_SVC_Set>:

/* Thread Mode */
void RTOS_OS_SVC_Set(SVC_ID ID)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	4603      	mov	r3, r0
 8000948:	71fb      	strb	r3, [r7, #7]
	switch(ID)
 800094a:	79fb      	ldrb	r3, [r7, #7]
 800094c:	2b01      	cmp	r3, #1
 800094e:	d006      	beq.n	800095e <RTOS_OS_SVC_Set+0x1e>
 8000950:	2b02      	cmp	r3, #2
 8000952:	d006      	beq.n	8000962 <RTOS_OS_SVC_Set+0x22>
 8000954:	2b00      	cmp	r3, #0
 8000956:	d000      	beq.n	800095a <RTOS_OS_SVC_Set+0x1a>
		break;
	case SVC_TaskWaitingTime:
		__asm("svc #0x02");
		break;
	}
}
 8000958:	e005      	b.n	8000966 <RTOS_OS_SVC_Set+0x26>
		__asm("svc #0x00");
 800095a:	df00      	svc	0
		break;
 800095c:	e003      	b.n	8000966 <RTOS_OS_SVC_Set+0x26>
		__asm("svc #0x01");
 800095e:	df01      	svc	1
		break;
 8000960:	e001      	b.n	8000966 <RTOS_OS_SVC_Set+0x26>
		__asm("svc #0x02");
 8000962:	df02      	svc	2
		break;
 8000964:	bf00      	nop
}
 8000966:	bf00      	nop
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	bc80      	pop	{r7}
 800096e:	4770      	bx	lr

08000970 <RTOS_init>:
 * @param [in]	- none
 * @retval 		- RTOS_Status_t: return a status for the execution of the function call
 * Note			- none
 */
RTOS_ERROR_t RTOS_init()
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
	RTOS_ERROR_t error = RTOS_OK;
 8000976:	2300      	movs	r3, #0
 8000978:	71fb      	strb	r3, [r7, #7]

	//1. Update OS mode (OSsuspend)
	S_OS_CONTROL.OSModeID = OSsuspend;
 800097a:	4b14      	ldr	r3, [pc, #80]	; (80009cc <RTOS_init+0x5c>)
 800097c:	2200      	movs	r2, #0
 800097e:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8

	//2. Specify the MAIN Stack for OS
	RTOS_Create_MainStack();
 8000982:	f7ff fe47 	bl	8000614 <RTOS_Create_MainStack>

	//3. create OS Ready Queue
	if(FIFO_Init(&Glob_Ready_Queue, Glob_Ready_Queue_FIFO, READY_FIFO_SIZE) != FIFO_NO_ERROR)
 8000986:	2264      	movs	r2, #100	; 0x64
 8000988:	4911      	ldr	r1, [pc, #68]	; (80009d0 <RTOS_init+0x60>)
 800098a:	4812      	ldr	r0, [pc, #72]	; (80009d4 <RTOS_init+0x64>)
 800098c:	f000 f8a4 	bl	8000ad8 <FIFO_Init>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <RTOS_init+0x2a>
	{
		error = READY_QUEUE_INIT_ERROR;
 8000996:	2304      	movs	r3, #4
 8000998:	71fb      	strb	r3, [r7, #7]
	}

	//4. Configure Idle task
	strcpy(Glob_Idle_Task.TaskName, "IdleTask");
 800099a:	4b0f      	ldr	r3, [pc, #60]	; (80009d8 <RTOS_init+0x68>)
 800099c:	4a0f      	ldr	r2, [pc, #60]	; (80009dc <RTOS_init+0x6c>)
 800099e:	ca07      	ldmia	r2, {r0, r1, r2}
 80009a0:	c303      	stmia	r3!, {r0, r1}
 80009a2:	701a      	strb	r2, [r3, #0]
	Glob_Idle_Task.Priority = 255;				// Give it the highest value --> to be the lowest priority
 80009a4:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <RTOS_init+0x70>)
 80009a6:	22ff      	movs	r2, #255	; 0xff
 80009a8:	625a      	str	r2, [r3, #36]	; 0x24
	Glob_Idle_Task.pTaskEntry = RTOS_IdleTask;
 80009aa:	4b0d      	ldr	r3, [pc, #52]	; (80009e0 <RTOS_init+0x70>)
 80009ac:	4a0d      	ldr	r2, [pc, #52]	; (80009e4 <RTOS_init+0x74>)
 80009ae:	629a      	str	r2, [r3, #40]	; 0x28
	Glob_Idle_Task.StackSize = 300;				// 300 bytes
 80009b0:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <RTOS_init+0x70>)
 80009b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80009b6:	601a      	str	r2, [r3, #0]
	error = RTOS_Create_Task(&Glob_Idle_Task);
 80009b8:	4809      	ldr	r0, [pc, #36]	; (80009e0 <RTOS_init+0x70>)
 80009ba:	f000 f815 	bl	80009e8 <RTOS_Create_Task>
 80009be:	4603      	mov	r3, r0
 80009c0:	71fb      	strb	r3, [r7, #7]

	return error;
 80009c2:	79fb      	ldrb	r3, [r7, #7]
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	3708      	adds	r7, #8
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	20000298 	.word	0x20000298
 80009d0:	20000108 	.word	0x20000108
 80009d4:	200000f4 	.word	0x200000f4
 80009d8:	2000044c 	.word	0x2000044c
 80009dc:	08000c94 	.word	0x08000c94
 80009e0:	20000448 	.word	0x20000448
 80009e4:	080006cd 	.word	0x080006cd

080009e8 <RTOS_Create_Task>:
 * @param [in]	- Tref: the passed task parameters to create
 * @retval 		- RTOS_Status_t: return a status for the execution of the function call
 * Note			- none
 */
RTOS_ERROR_t RTOS_Create_Task(Task_t* Tref)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
	RTOS_ERROR_t error = RTOS_OK;
 80009f0:	2300      	movs	r3, #0
 80009f2:	73fb      	strb	r3, [r7, #15]

	//1. Create its own PSP Stack
	Tref->_S_PSP_Task = S_OS_CONTROL.PSP_Task_Locator;
 80009f4:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <RTOS_Create_Task+0x64>)
 80009f6:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	62da      	str	r2, [r3, #44]	; 0x2c
	Tref->_E_PSP_Task = Tref->_S_PSP_Task - Tref->StackSize;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	1ad2      	subs	r2, r2, r3
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	631a      	str	r2, [r3, #48]	; 0x30

	//2. Check if task stack exceeds the PSP stack or not
	//if(Tref->_E_PSP_Task < (unsigned int)(&_eheap));

	//3. Allign 8 bytes space between Task PSP and other
	S_OS_CONTROL.PSP_Task_Locator = Tref->_E_PSP_Task - 8;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a10:	3b08      	subs	r3, #8
 8000a12:	4a0e      	ldr	r2, [pc, #56]	; (8000a4c <RTOS_Create_Task+0x64>)
 8000a14:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

	//4. Initialize PSP Task Stack (Task Frame)
	RTOS_Create_TaskStack(Tref);
 8000a18:	6878      	ldr	r0, [r7, #4]
 8000a1a:	f7ff fe19 	bl	8000650 <RTOS_Create_TaskStack>

	//5. Update OS Tasks Array and Num. of Active tasks
	S_OS_CONTROL.OSTasks[S_OS_CONTROL.NoofActiveTasks] = Tref;
 8000a1e:	4b0b      	ldr	r3, [pc, #44]	; (8000a4c <RTOS_Create_Task+0x64>)
 8000a20:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000a24:	4909      	ldr	r1, [pc, #36]	; (8000a4c <RTOS_Create_Task+0x64>)
 8000a26:	687a      	ldr	r2, [r7, #4]
 8000a28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	S_OS_CONTROL.NoofActiveTasks++;
 8000a2c:	4b07      	ldr	r3, [pc, #28]	; (8000a4c <RTOS_Create_Task+0x64>)
 8000a2e:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000a32:	3301      	adds	r3, #1
 8000a34:	4a05      	ldr	r2, [pc, #20]	; (8000a4c <RTOS_Create_Task+0x64>)
 8000a36:	f8c2 319c 	str.w	r3, [r2, #412]	; 0x19c

	//6. Set task state to suspended
	Tref->TaskState = Suspend;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	return error;
 8000a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3710      	adds	r7, #16
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20000298 	.word	0x20000298

08000a50 <RTOS_Activate_Task>:
 * @param [in]	- Tref: the passed task parameters to Activate
 * @retval 		- RTOS_Status_t: return a status for the execution of the function call
 * Note			- none
 */
RTOS_ERROR_t RTOS_Activate_Task(Task_t* Tref)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
	//1. Set task state = waiting
	Tref->TaskState = Waiting;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	RTOS_OS_SVC_Set(SVC_ActivateTask);
 8000a60:	2000      	movs	r0, #0
 8000a62:	f7ff ff6d 	bl	8000940 <RTOS_OS_SVC_Set>
}
 8000a66:	bf00      	nop
 8000a68:	4618      	mov	r0, r3
 8000a6a:	3708      	adds	r7, #8
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <RTOS_StartOS>:
 * @param [in]	- none
 * @retval 		- RTOS_Status_t: return a status for the execution of the function call
 * Note			- none
 */
RTOS_ERROR_t RTOS_StartOS()
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
	//1. Change OS Mode to running
	S_OS_CONTROL.OSModeID = OSrunning;
 8000a74:	4b16      	ldr	r3, [pc, #88]	; (8000ad0 <RTOS_StartOS+0x60>)
 8000a76:	2201      	movs	r2, #1
 8000a78:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8

	//2. Set Idle Task as Current Task
	S_OS_CONTROL.CurrentTask = &Glob_Idle_Task;
 8000a7c:	4b14      	ldr	r3, [pc, #80]	; (8000ad0 <RTOS_StartOS+0x60>)
 8000a7e:	4a15      	ldr	r2, [pc, #84]	; (8000ad4 <RTOS_StartOS+0x64>)
 8000a80:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0

	//3. Activate Current Task (idle task)
	RTOS_Activate_Task(S_OS_CONTROL.CurrentTask);
 8000a84:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <RTOS_StartOS+0x60>)
 8000a86:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f7ff ffe0 	bl	8000a50 <RTOS_Activate_Task>

	//4. Start Ticker
	Start_Ticker();
 8000a90:	f7ff fcca 	bl	8000428 <Start_Ticker>

	//5. Set CPU PSP for Current Task (Idle Task)
	OS_SET_PSP(S_OS_CONTROL.CurrentTask->Current_PSP);
 8000a94:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <RTOS_StartOS+0x60>)
 8000a96:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f380 8809 	msr	PSP, r0

	//6. Switch Thread Mode SP (MSP --> PSP) and make it unprivileged
	OS_SWITCH_SP_to_PSP;
 8000aa2:	f3ef 8014 	mrs	r0, CONTROL
 8000aa6:	f04f 0102 	mov.w	r1, #2
 8000aaa:	ea40 0001 	orr.w	r0, r0, r1
 8000aae:	f380 8814 	msr	CONTROL, r0
	OS_SWITCH_to_unprivilaged;
 8000ab2:	f3ef 8314 	mrs	r3, CONTROL
 8000ab6:	f043 0301 	orr.w	r3, r3, #1
 8000aba:	f383 8814 	msr	CONTROL, r3

	//7. Call Current Task Function
	S_OS_CONTROL.CurrentTask->pTaskEntry();
 8000abe:	4b04      	ldr	r3, [pc, #16]	; (8000ad0 <RTOS_StartOS+0x60>)
 8000ac0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ac6:	4798      	blx	r3

}
 8000ac8:	bf00      	nop
 8000aca:	4618      	mov	r0, r3
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	20000298 	.word	0x20000298
 8000ad4:	20000448 	.word	0x20000448

08000ad8 <FIFO_Init>:
 * @param [in]	- none
 * @retval 		-
 * Note			- none
 */
Buffer_Status FIFO_Init (FIFO_Buf_t* fifo, element_type* buf, unsigned int length)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b085      	sub	sp, #20
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	60f8      	str	r0, [r7, #12]
 8000ae0:	60b9      	str	r1, [r7, #8]
 8000ae2:	607a      	str	r2, [r7, #4]
	if(!buf)
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d101      	bne.n	8000aee <FIFO_Init+0x16>
		return FIFO_NULL;
 8000aea:	2303      	movs	r3, #3
 8000aec:	e011      	b.n	8000b12 <FIFO_Init+0x3a>

	fifo->base = buf;
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	68ba      	ldr	r2, [r7, #8]
 8000af2:	60da      	str	r2, [r3, #12]
	fifo->head = fifo->base;
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	68da      	ldr	r2, [r3, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	605a      	str	r2, [r3, #4]
	fifo->tail = fifo->base;
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	68da      	ldr	r2, [r3, #12]
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	609a      	str	r2, [r3, #8]
	fifo->length = length;
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	687a      	ldr	r2, [r7, #4]
 8000b08:	611a      	str	r2, [r3, #16]
	fifo->counter = 0;
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]

	return FIFO_NO_ERROR;
 8000b10:	2300      	movs	r3, #0
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3714      	adds	r7, #20
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bc80      	pop	{r7}
 8000b1a:	4770      	bx	lr

08000b1c <FIFO_Enqueue>:


Buffer_Status FIFO_Enqueue (FIFO_Buf_t* fifo, element_type item)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	6039      	str	r1, [r7, #0]
	/* fifo null */
	if(!fifo->base || !fifo->length)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	68db      	ldr	r3, [r3, #12]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d003      	beq.n	8000b36 <FIFO_Enqueue+0x1a>
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	691b      	ldr	r3, [r3, #16]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d101      	bne.n	8000b3a <FIFO_Enqueue+0x1e>
		return FIFO_NULL;
 8000b36:	2303      	movs	r3, #3
 8000b38:	e02d      	b.n	8000b96 <FIFO_Enqueue+0x7a>

	/* fifo full */
	if((fifo->head == fifo->tail) && (fifo->counter == fifo->length))
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	685a      	ldr	r2, [r3, #4]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	689b      	ldr	r3, [r3, #8]
 8000b42:	429a      	cmp	r2, r3
 8000b44:	d107      	bne.n	8000b56 <FIFO_Enqueue+0x3a>
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	691b      	ldr	r3, [r3, #16]
 8000b4e:	429a      	cmp	r2, r3
 8000b50:	d101      	bne.n	8000b56 <FIFO_Enqueue+0x3a>
		return FIFO_FULL;
 8000b52:	2301      	movs	r3, #1
 8000b54:	e01f      	b.n	8000b96 <FIFO_Enqueue+0x7a>

	/* add item */
	*(fifo->tail) = item;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	689b      	ldr	r3, [r3, #8]
 8000b5a:	683a      	ldr	r2, [r7, #0]
 8000b5c:	601a      	str	r2, [r3, #0]
	fifo->counter++;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	1c5a      	adds	r2, r3, #1
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	601a      	str	r2, [r3, #0]

	/* For Circular fifo again */
	/* circular enqueue */
	if(fifo->tail == (((unsigned int)fifo->base + (4*fifo->length)) - 4 ))
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	689b      	ldr	r3, [r3, #8]
 8000b6c:	687a      	ldr	r2, [r7, #4]
 8000b6e:	68d2      	ldr	r2, [r2, #12]
 8000b70:	4611      	mov	r1, r2
 8000b72:	687a      	ldr	r2, [r7, #4]
 8000b74:	6912      	ldr	r2, [r2, #16]
 8000b76:	0092      	lsls	r2, r2, #2
 8000b78:	440a      	add	r2, r1
 8000b7a:	3a04      	subs	r2, #4
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d104      	bne.n	8000b8a <FIFO_Enqueue+0x6e>
		fifo->tail = fifo->base;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	68da      	ldr	r2, [r3, #12]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	e004      	b.n	8000b94 <FIFO_Enqueue+0x78>
	else
		fifo->tail++;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	689b      	ldr	r3, [r3, #8]
 8000b8e:	1d1a      	adds	r2, r3, #4
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	609a      	str	r2, [r3, #8]

	return FIFO_NO_ERROR;
 8000b94:	2300      	movs	r3, #0
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bc80      	pop	{r7}
 8000b9e:	4770      	bx	lr

08000ba0 <FIFO_Dequeue>:


Buffer_Status FIFO_Dequeue (FIFO_Buf_t* fifo, element_type* item)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	6039      	str	r1, [r7, #0]
	/* fifo null */
	if(!fifo->base || !fifo->length)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	68db      	ldr	r3, [r3, #12]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d003      	beq.n	8000bba <FIFO_Dequeue+0x1a>
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	691b      	ldr	r3, [r3, #16]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d101      	bne.n	8000bbe <FIFO_Dequeue+0x1e>
		return FIFO_NULL;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	e028      	b.n	8000c10 <FIFO_Dequeue+0x70>

	/* fifo empty */
	if(fifo->head == fifo->tail)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	685a      	ldr	r2, [r3, #4]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	689b      	ldr	r3, [r3, #8]
 8000bc6:	429a      	cmp	r2, r3
 8000bc8:	d101      	bne.n	8000bce <FIFO_Dequeue+0x2e>
		return FIFO_EMPTY;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	e020      	b.n	8000c10 <FIFO_Dequeue+0x70>

	*item = *(fifo->head);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	681a      	ldr	r2, [r3, #0]
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	601a      	str	r2, [r3, #0]
	fifo->counter--;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	1e5a      	subs	r2, r3, #1
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	601a      	str	r2, [r3, #0]

	/* For Circular fifo again */
	/* circular enqueue */
	if(fifo->head == (((unsigned int)fifo->base + (4*fifo->length)) - 4 ))
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	687a      	ldr	r2, [r7, #4]
 8000be8:	68d2      	ldr	r2, [r2, #12]
 8000bea:	4611      	mov	r1, r2
 8000bec:	687a      	ldr	r2, [r7, #4]
 8000bee:	6912      	ldr	r2, [r2, #16]
 8000bf0:	0092      	lsls	r2, r2, #2
 8000bf2:	440a      	add	r2, r1
 8000bf4:	3a04      	subs	r2, #4
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d104      	bne.n	8000c04 <FIFO_Dequeue+0x64>
		fifo->head = fifo->base;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	68da      	ldr	r2, [r3, #12]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	e004      	b.n	8000c0e <FIFO_Dequeue+0x6e>
	else
		fifo->head++;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	1d1a      	adds	r2, r3, #4
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	605a      	str	r2, [r3, #4]

	return FIFO_NO_ERROR;
 8000c0e:	2300      	movs	r3, #0
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bc80      	pop	{r7}
 8000c18:	4770      	bx	lr
	...

08000c1c <__libc_init_array>:
 8000c1c:	b570      	push	{r4, r5, r6, lr}
 8000c1e:	2500      	movs	r5, #0
 8000c20:	4e0c      	ldr	r6, [pc, #48]	; (8000c54 <__libc_init_array+0x38>)
 8000c22:	4c0d      	ldr	r4, [pc, #52]	; (8000c58 <__libc_init_array+0x3c>)
 8000c24:	1ba4      	subs	r4, r4, r6
 8000c26:	10a4      	asrs	r4, r4, #2
 8000c28:	42a5      	cmp	r5, r4
 8000c2a:	d109      	bne.n	8000c40 <__libc_init_array+0x24>
 8000c2c:	f000 f81a 	bl	8000c64 <_init>
 8000c30:	2500      	movs	r5, #0
 8000c32:	4e0a      	ldr	r6, [pc, #40]	; (8000c5c <__libc_init_array+0x40>)
 8000c34:	4c0a      	ldr	r4, [pc, #40]	; (8000c60 <__libc_init_array+0x44>)
 8000c36:	1ba4      	subs	r4, r4, r6
 8000c38:	10a4      	asrs	r4, r4, #2
 8000c3a:	42a5      	cmp	r5, r4
 8000c3c:	d105      	bne.n	8000c4a <__libc_init_array+0x2e>
 8000c3e:	bd70      	pop	{r4, r5, r6, pc}
 8000c40:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c44:	4798      	blx	r3
 8000c46:	3501      	adds	r5, #1
 8000c48:	e7ee      	b.n	8000c28 <__libc_init_array+0xc>
 8000c4a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c4e:	4798      	blx	r3
 8000c50:	3501      	adds	r5, #1
 8000c52:	e7f2      	b.n	8000c3a <__libc_init_array+0x1e>
 8000c54:	08000ca0 	.word	0x08000ca0
 8000c58:	08000ca0 	.word	0x08000ca0
 8000c5c:	08000ca0 	.word	0x08000ca0
 8000c60:	08000ca4 	.word	0x08000ca4

08000c64 <_init>:
 8000c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c66:	bf00      	nop
 8000c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c6a:	bc08      	pop	{r3}
 8000c6c:	469e      	mov	lr, r3
 8000c6e:	4770      	bx	lr

08000c70 <_fini>:
 8000c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c72:	bf00      	nop
 8000c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c76:	bc08      	pop	{r3}
 8000c78:	469e      	mov	lr, r3
 8000c7a:	4770      	bx	lr
