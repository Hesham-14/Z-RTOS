
U15_Z-RTOS_Session_3.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c3c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08000d6c  08000d6c  00010d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000d98  08000d98  00010da0  2**0
                  CONTENTS
  4 .ARM          00000000  08000d98  08000d98  00010da0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d98  08000da0  00010da0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d98  08000d98  00010d98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d9c  08000d9c  00010d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010da0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d8  20000000  08000da0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004d8  08000da0  000204d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010da0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002f39  00000000  00000000  00010dc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000008e9  00000000  00000000  00013d02  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000008f0  00000000  00000000  000145eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001a8  00000000  00000000  00014ee0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000160  00000000  00000000  00015088  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00004295  00000000  00000000  000151e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00001f30  00000000  00000000  0001947d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00012d49  00000000  00000000  0001b3ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002e0f6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000504  00000000  00000000  0002e174  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000d54 	.word	0x08000d54

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000d54 	.word	0x08000d54

08000170 <strcmp>:
 8000170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000178:	2a01      	cmp	r2, #1
 800017a:	bf28      	it	cs
 800017c:	429a      	cmpcs	r2, r3
 800017e:	d0f7      	beq.n	8000170 <strcmp>
 8000180:	1ad0      	subs	r0, r2, r3
 8000182:	4770      	bx	lr

08000184 <Task1_fun>:

/**************************************************************
---------------------- Tasks Functions  ----------------------
 ***************************************************************/
void Task1_fun()
{
 8000184:	b580      	push	{r7, lr}
 8000186:	af00      	add	r7, sp, #0
	static int count = 0;
	while(1)
	{
		//Task 1 Code
		Task1LED ^= 1;
 8000188:	4b0b      	ldr	r3, [pc, #44]	; (80001b8 <Task1_fun+0x34>)
 800018a:	781b      	ldrb	r3, [r3, #0]
 800018c:	f083 0301 	eor.w	r3, r3, #1
 8000190:	b2da      	uxtb	r2, r3
 8000192:	4b09      	ldr	r3, [pc, #36]	; (80001b8 <Task1_fun+0x34>)
 8000194:	701a      	strb	r2, [r3, #0]
		count++;
 8000196:	4b09      	ldr	r3, [pc, #36]	; (80001bc <Task1_fun+0x38>)
 8000198:	681b      	ldr	r3, [r3, #0]
 800019a:	3301      	adds	r3, #1
 800019c:	4a07      	ldr	r2, [pc, #28]	; (80001bc <Task1_fun+0x38>)
 800019e:	6013      	str	r3, [r2, #0]
		if(count == 30)
 80001a0:	4b06      	ldr	r3, [pc, #24]	; (80001bc <Task1_fun+0x38>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	2b1e      	cmp	r3, #30
 80001a6:	d1ef      	bne.n	8000188 <Task1_fun+0x4>
		{
			RTOS_Activate_Task(&Task4);
 80001a8:	4805      	ldr	r0, [pc, #20]	; (80001c0 <Task1_fun+0x3c>)
 80001aa:	f000 fcb9 	bl	8000b20 <RTOS_Activate_Task>
			count = 0;
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <Task1_fun+0x38>)
 80001b0:	2200      	movs	r2, #0
 80001b2:	601a      	str	r2, [r3, #0]
		Task1LED ^= 1;
 80001b4:	e7e8      	b.n	8000188 <Task1_fun+0x4>
 80001b6:	bf00      	nop
 80001b8:	200000f4 	.word	0x200000f4
 80001bc:	2000001c 	.word	0x2000001c
 80001c0:	20000024 	.word	0x20000024

080001c4 <Task2_fun>:

	}
}

void Task2_fun()
{
 80001c4:	b480      	push	{r7}
 80001c6:	af00      	add	r7, sp, #0
	while(1)
	{
		//Task 2 Code
		Task2LED ^= 1;
 80001c8:	4b03      	ldr	r3, [pc, #12]	; (80001d8 <Task2_fun+0x14>)
 80001ca:	781b      	ldrb	r3, [r3, #0]
 80001cc:	f083 0301 	eor.w	r3, r3, #1
 80001d0:	b2da      	uxtb	r2, r3
 80001d2:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <Task2_fun+0x14>)
 80001d4:	701a      	strb	r2, [r3, #0]
 80001d6:	e7f7      	b.n	80001c8 <Task2_fun+0x4>
 80001d8:	200000ad 	.word	0x200000ad

080001dc <Task3_fun>:
	}
}

void Task3_fun()
{
 80001dc:	b480      	push	{r7}
 80001de:	af00      	add	r7, sp, #0
	while(1)
	{
		//Task 2 Code
		Task3LED ^= 1;
 80001e0:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <Task3_fun+0x14>)
 80001e2:	781b      	ldrb	r3, [r3, #0]
 80001e4:	f083 0301 	eor.w	r3, r3, #1
 80001e8:	b2da      	uxtb	r2, r3
 80001ea:	4b01      	ldr	r3, [pc, #4]	; (80001f0 <Task3_fun+0x14>)
 80001ec:	701a      	strb	r2, [r3, #0]
 80001ee:	e7f7      	b.n	80001e0 <Task3_fun+0x4>
 80001f0:	2000013c 	.word	0x2000013c

080001f4 <Task4_fun>:
	}
}

void Task4_fun()
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	af00      	add	r7, sp, #0
	static int count=0;
	while(1)
	{
		//Task 4 Code
		Task4LED ^= 1;
 80001f8:	4b0c      	ldr	r3, [pc, #48]	; (800022c <Task4_fun+0x38>)
 80001fa:	781b      	ldrb	r3, [r3, #0]
 80001fc:	f083 0301 	eor.w	r3, r3, #1
 8000200:	b2da      	uxtb	r2, r3
 8000202:	4b0a      	ldr	r3, [pc, #40]	; (800022c <Task4_fun+0x38>)
 8000204:	701a      	strb	r2, [r3, #0]
		count++;
 8000206:	4b0a      	ldr	r3, [pc, #40]	; (8000230 <Task4_fun+0x3c>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	3301      	adds	r3, #1
 800020c:	4a08      	ldr	r2, [pc, #32]	; (8000230 <Task4_fun+0x3c>)
 800020e:	6013      	str	r3, [r2, #0]
		if(count == 0xFFF)
 8000210:	4b07      	ldr	r3, [pc, #28]	; (8000230 <Task4_fun+0x3c>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000218:	4293      	cmp	r3, r2
 800021a:	d1ed      	bne.n	80001f8 <Task4_fun+0x4>
		{
			RTOS_Terminate_Task(&Task4);
 800021c:	4805      	ldr	r0, [pc, #20]	; (8000234 <Task4_fun+0x40>)
 800021e:	f000 fc8f 	bl	8000b40 <RTOS_Terminate_Task>
			count = 0;
 8000222:	4b03      	ldr	r3, [pc, #12]	; (8000230 <Task4_fun+0x3c>)
 8000224:	2200      	movs	r2, #0
 8000226:	601a      	str	r2, [r3, #0]
		Task4LED ^= 1;
 8000228:	e7e6      	b.n	80001f8 <Task4_fun+0x4>
 800022a:	bf00      	nop
 800022c:	200000ac 	.word	0x200000ac
 8000230:	20000020 	.word	0x20000020
 8000234:	20000024 	.word	0x20000024

08000238 <main>:
	}
}

//priority inversion Example
int main(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b082      	sub	sp, #8
 800023c:	af00      	add	r7, sp, #0
	volatile RTOS_ERROR_t error;

	HAL_init();
 800023e:	f000 f937 	bl	80004b0 <HAL_init>

	if(RTOS_init() != RTOS_OK)
 8000242:	f000 fbfd 	bl	8000a40 <RTOS_init>
 8000246:	4603      	mov	r3, r0
 8000248:	2b00      	cmp	r3, #0
 800024a:	d000      	beq.n	800024e <main+0x16>
		while(1);
 800024c:	e7fe      	b.n	800024c <main+0x14>

	/* Initialize Tasks */
	Task1.StackSize = 1024;
 800024e:	4b42      	ldr	r3, [pc, #264]	; (8000358 <main+0x120>)
 8000250:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000254:	601a      	str	r2, [r3, #0]
	Task1.pTaskEntry = Task1_fun;
 8000256:	4b40      	ldr	r3, [pc, #256]	; (8000358 <main+0x120>)
 8000258:	4a40      	ldr	r2, [pc, #256]	; (800035c <main+0x124>)
 800025a:	629a      	str	r2, [r3, #40]	; 0x28
	Task1.Priority = 3;
 800025c:	4b3e      	ldr	r3, [pc, #248]	; (8000358 <main+0x120>)
 800025e:	2203      	movs	r2, #3
 8000260:	625a      	str	r2, [r3, #36]	; 0x24
	strcpy(Task1.TaskName, "Task_1");
 8000262:	4b3f      	ldr	r3, [pc, #252]	; (8000360 <main+0x128>)
 8000264:	4a3f      	ldr	r2, [pc, #252]	; (8000364 <main+0x12c>)
 8000266:	e892 0003 	ldmia.w	r2, {r0, r1}
 800026a:	6018      	str	r0, [r3, #0]
 800026c:	3304      	adds	r3, #4
 800026e:	8019      	strh	r1, [r3, #0]
 8000270:	3302      	adds	r3, #2
 8000272:	0c0a      	lsrs	r2, r1, #16
 8000274:	701a      	strb	r2, [r3, #0]

	Task2.StackSize = 1024;
 8000276:	4b3c      	ldr	r3, [pc, #240]	; (8000368 <main+0x130>)
 8000278:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800027c:	601a      	str	r2, [r3, #0]
	Task2.pTaskEntry = Task2_fun;
 800027e:	4b3a      	ldr	r3, [pc, #232]	; (8000368 <main+0x130>)
 8000280:	4a3a      	ldr	r2, [pc, #232]	; (800036c <main+0x134>)
 8000282:	629a      	str	r2, [r3, #40]	; 0x28
	Task2.Priority = 3;
 8000284:	4b38      	ldr	r3, [pc, #224]	; (8000368 <main+0x130>)
 8000286:	2203      	movs	r2, #3
 8000288:	625a      	str	r2, [r3, #36]	; 0x24
	strcpy(Task2.TaskName, "Task_2");
 800028a:	4b39      	ldr	r3, [pc, #228]	; (8000370 <main+0x138>)
 800028c:	4a39      	ldr	r2, [pc, #228]	; (8000374 <main+0x13c>)
 800028e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000292:	6018      	str	r0, [r3, #0]
 8000294:	3304      	adds	r3, #4
 8000296:	8019      	strh	r1, [r3, #0]
 8000298:	3302      	adds	r3, #2
 800029a:	0c0a      	lsrs	r2, r1, #16
 800029c:	701a      	strb	r2, [r3, #0]

	Task3.StackSize = 1024;
 800029e:	4b36      	ldr	r3, [pc, #216]	; (8000378 <main+0x140>)
 80002a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80002a4:	601a      	str	r2, [r3, #0]
	Task3.pTaskEntry = Task3_fun;
 80002a6:	4b34      	ldr	r3, [pc, #208]	; (8000378 <main+0x140>)
 80002a8:	4a34      	ldr	r2, [pc, #208]	; (800037c <main+0x144>)
 80002aa:	629a      	str	r2, [r3, #40]	; 0x28
	Task3.Priority = 3;
 80002ac:	4b32      	ldr	r3, [pc, #200]	; (8000378 <main+0x140>)
 80002ae:	2203      	movs	r2, #3
 80002b0:	625a      	str	r2, [r3, #36]	; 0x24
	strcpy(Task3.TaskName, "Task_3");
 80002b2:	4b33      	ldr	r3, [pc, #204]	; (8000380 <main+0x148>)
 80002b4:	4a33      	ldr	r2, [pc, #204]	; (8000384 <main+0x14c>)
 80002b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002ba:	6018      	str	r0, [r3, #0]
 80002bc:	3304      	adds	r3, #4
 80002be:	8019      	strh	r1, [r3, #0]
 80002c0:	3302      	adds	r3, #2
 80002c2:	0c0a      	lsrs	r2, r1, #16
 80002c4:	701a      	strb	r2, [r3, #0]

	Task4.StackSize = 1024;
 80002c6:	4b30      	ldr	r3, [pc, #192]	; (8000388 <main+0x150>)
 80002c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80002cc:	601a      	str	r2, [r3, #0]
	Task4.pTaskEntry = Task4_fun;
 80002ce:	4b2e      	ldr	r3, [pc, #184]	; (8000388 <main+0x150>)
 80002d0:	4a2e      	ldr	r2, [pc, #184]	; (800038c <main+0x154>)
 80002d2:	629a      	str	r2, [r3, #40]	; 0x28
	Task4.Priority = 1;
 80002d4:	4b2c      	ldr	r3, [pc, #176]	; (8000388 <main+0x150>)
 80002d6:	2201      	movs	r2, #1
 80002d8:	625a      	str	r2, [r3, #36]	; 0x24
	strcpy(Task4.TaskName, "Task_4");
 80002da:	4b2d      	ldr	r3, [pc, #180]	; (8000390 <main+0x158>)
 80002dc:	4a2d      	ldr	r2, [pc, #180]	; (8000394 <main+0x15c>)
 80002de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002e2:	6018      	str	r0, [r3, #0]
 80002e4:	3304      	adds	r3, #4
 80002e6:	8019      	strh	r1, [r3, #0]
 80002e8:	3302      	adds	r3, #2
 80002ea:	0c0a      	lsrs	r2, r1, #16
 80002ec:	701a      	strb	r2, [r3, #0]

	error += RTOS_Create_Task(&Task1);
 80002ee:	481a      	ldr	r0, [pc, #104]	; (8000358 <main+0x120>)
 80002f0:	f000 fbe2 	bl	8000ab8 <RTOS_Create_Task>
 80002f4:	4603      	mov	r3, r0
 80002f6:	461a      	mov	r2, r3
 80002f8:	79fb      	ldrb	r3, [r7, #7]
 80002fa:	b2db      	uxtb	r3, r3
 80002fc:	4413      	add	r3, r2
 80002fe:	b2db      	uxtb	r3, r3
 8000300:	71fb      	strb	r3, [r7, #7]
	error += RTOS_Create_Task(&Task2);
 8000302:	4819      	ldr	r0, [pc, #100]	; (8000368 <main+0x130>)
 8000304:	f000 fbd8 	bl	8000ab8 <RTOS_Create_Task>
 8000308:	4603      	mov	r3, r0
 800030a:	461a      	mov	r2, r3
 800030c:	79fb      	ldrb	r3, [r7, #7]
 800030e:	b2db      	uxtb	r3, r3
 8000310:	4413      	add	r3, r2
 8000312:	b2db      	uxtb	r3, r3
 8000314:	71fb      	strb	r3, [r7, #7]
	error += RTOS_Create_Task(&Task3);
 8000316:	4818      	ldr	r0, [pc, #96]	; (8000378 <main+0x140>)
 8000318:	f000 fbce 	bl	8000ab8 <RTOS_Create_Task>
 800031c:	4603      	mov	r3, r0
 800031e:	461a      	mov	r2, r3
 8000320:	79fb      	ldrb	r3, [r7, #7]
 8000322:	b2db      	uxtb	r3, r3
 8000324:	4413      	add	r3, r2
 8000326:	b2db      	uxtb	r3, r3
 8000328:	71fb      	strb	r3, [r7, #7]
	error += RTOS_Create_Task(&Task4);
 800032a:	4817      	ldr	r0, [pc, #92]	; (8000388 <main+0x150>)
 800032c:	f000 fbc4 	bl	8000ab8 <RTOS_Create_Task>
 8000330:	4603      	mov	r3, r0
 8000332:	461a      	mov	r2, r3
 8000334:	79fb      	ldrb	r3, [r7, #7]
 8000336:	b2db      	uxtb	r3, r3
 8000338:	4413      	add	r3, r2
 800033a:	b2db      	uxtb	r3, r3
 800033c:	71fb      	strb	r3, [r7, #7]

	// Activate Tasks
	RTOS_Activate_Task(&Task1);
 800033e:	4806      	ldr	r0, [pc, #24]	; (8000358 <main+0x120>)
 8000340:	f000 fbee 	bl	8000b20 <RTOS_Activate_Task>
	RTOS_Activate_Task(&Task2);
 8000344:	4808      	ldr	r0, [pc, #32]	; (8000368 <main+0x130>)
 8000346:	f000 fbeb 	bl	8000b20 <RTOS_Activate_Task>
	RTOS_Activate_Task(&Task3);
 800034a:	480b      	ldr	r0, [pc, #44]	; (8000378 <main+0x140>)
 800034c:	f000 fbe8 	bl	8000b20 <RTOS_Activate_Task>

	// Start OS
	RTOS_StartOS();
 8000350:	f000 fc06 	bl	8000b60 <RTOS_StartOS>

	while (1)
 8000354:	e7fe      	b.n	8000354 <main+0x11c>
 8000356:	bf00      	nop
 8000358:	20000068 	.word	0x20000068
 800035c:	08000185 	.word	0x08000185
 8000360:	2000006c 	.word	0x2000006c
 8000364:	08000d6c 	.word	0x08000d6c
 8000368:	200000f8 	.word	0x200000f8
 800036c:	080001c5 	.word	0x080001c5
 8000370:	200000fc 	.word	0x200000fc
 8000374:	08000d74 	.word	0x08000d74
 8000378:	200000b0 	.word	0x200000b0
 800037c:	080001dd 	.word	0x080001dd
 8000380:	200000b4 	.word	0x200000b4
 8000384:	08000d7c 	.word	0x08000d7c
 8000388:	20000024 	.word	0x20000024
 800038c:	080001f5 	.word	0x080001f5
 8000390:	20000028 	.word	0x20000028
 8000394:	08000d84 	.word	0x08000d84

08000398 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000398:	480d      	ldr	r0, [pc, #52]	; (80003d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800039a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800039c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003a0:	480c      	ldr	r0, [pc, #48]	; (80003d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80003a2:	490d      	ldr	r1, [pc, #52]	; (80003d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003a4:	4a0d      	ldr	r2, [pc, #52]	; (80003dc <LoopForever+0xe>)
  movs r3, #0
 80003a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003a8:	e002      	b.n	80003b0 <LoopCopyDataInit>

080003aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003ae:	3304      	adds	r3, #4

080003b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003b4:	d3f9      	bcc.n	80003aa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003b6:	4a0a      	ldr	r2, [pc, #40]	; (80003e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003b8:	4c0a      	ldr	r4, [pc, #40]	; (80003e4 <LoopForever+0x16>)
  movs r3, #0
 80003ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003bc:	e001      	b.n	80003c2 <LoopFillZerobss>

080003be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003c0:	3204      	adds	r2, #4

080003c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003c4:	d3fb      	bcc.n	80003be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003c6:	f000 fca1 	bl	8000d0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003ca:	f7ff ff35 	bl	8000238 <main>

080003ce <LoopForever>:

LoopForever:
    b LoopForever
 80003ce:	e7fe      	b.n	80003ce <LoopForever>
  ldr   r0, =_estack
 80003d0:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80003d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003d8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003dc:	08000da0 	.word	0x08000da0
  ldr r2, =_sbss
 80003e0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003e4:	200004d8 	.word	0x200004d8

080003e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003e8:	e7fe      	b.n	80003e8 <ADC1_2_IRQHandler>
	...

080003ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b083      	sub	sp, #12
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	4603      	mov	r3, r0
 80003f4:	6039      	str	r1, [r7, #0]
 80003f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	db0a      	blt.n	8000416 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000400:	683b      	ldr	r3, [r7, #0]
 8000402:	b2da      	uxtb	r2, r3
 8000404:	490c      	ldr	r1, [pc, #48]	; (8000438 <__NVIC_SetPriority+0x4c>)
 8000406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800040a:	0152      	lsls	r2, r2, #5
 800040c:	b2d2      	uxtb	r2, r2
 800040e:	440b      	add	r3, r1
 8000410:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000414:	e00a      	b.n	800042c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000416:	683b      	ldr	r3, [r7, #0]
 8000418:	b2da      	uxtb	r2, r3
 800041a:	4908      	ldr	r1, [pc, #32]	; (800043c <__NVIC_SetPriority+0x50>)
 800041c:	79fb      	ldrb	r3, [r7, #7]
 800041e:	f003 030f 	and.w	r3, r3, #15
 8000422:	3b04      	subs	r3, #4
 8000424:	0152      	lsls	r2, r2, #5
 8000426:	b2d2      	uxtb	r2, r2
 8000428:	440b      	add	r3, r1
 800042a:	761a      	strb	r2, [r3, #24]
}
 800042c:	bf00      	nop
 800042e:	370c      	adds	r7, #12
 8000430:	46bd      	mov	sp, r7
 8000432:	bc80      	pop	{r7}
 8000434:	4770      	bx	lr
 8000436:	bf00      	nop
 8000438:	e000e100 	.word	0xe000e100
 800043c:	e000ed00 	.word	0xe000ed00

08000440 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	3b01      	subs	r3, #1
 800044c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000450:	d301      	bcc.n	8000456 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000452:	2301      	movs	r3, #1
 8000454:	e00f      	b.n	8000476 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000456:	4a0a      	ldr	r2, [pc, #40]	; (8000480 <SysTick_Config+0x40>)
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	3b01      	subs	r3, #1
 800045c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800045e:	2107      	movs	r1, #7
 8000460:	f04f 30ff 	mov.w	r0, #4294967295
 8000464:	f7ff ffc2 	bl	80003ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000468:	4b05      	ldr	r3, [pc, #20]	; (8000480 <SysTick_Config+0x40>)
 800046a:	2200      	movs	r2, #0
 800046c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800046e:	4b04      	ldr	r3, [pc, #16]	; (8000480 <SysTick_Config+0x40>)
 8000470:	2207      	movs	r2, #7
 8000472:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000474:	2300      	movs	r3, #0
}
 8000476:	4618      	mov	r0, r3
 8000478:	3708      	adds	r7, #8
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	e000e010 	.word	0xe000e010

08000484 <HardFault_Handler>:

/**************************************************************
---------------------- Handler Functions  ----------------------
 ***************************************************************/
void HardFault_Handler(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
	while(1);
 8000488:	e7fe      	b.n	8000488 <HardFault_Handler+0x4>

0800048a <MemManage_Handler>:
}
void MemManage_Handler(void)
{
 800048a:	b480      	push	{r7}
 800048c:	af00      	add	r7, sp, #0
	while(1);
 800048e:	e7fe      	b.n	800048e <MemManage_Handler+0x4>

08000490 <BusFault_Handler>:
}
void BusFault_Handler(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
	while(1);
 8000494:	e7fe      	b.n	8000494 <BusFault_Handler+0x4>

08000496 <UsageFault_Handler>:
}
void UsageFault_Handler(void)
{
 8000496:	b480      	push	{r7}
 8000498:	af00      	add	r7, sp, #0
	while(1);
 800049a:	e7fe      	b.n	800049a <UsageFault_Handler+0x4>

0800049c <SVC_Handler>:
}

__attribute ((naked)) void SVC_Handler ()
{
	// SWITCH_CPU_Accesslevel (privileged)
	__asm ("tst lr, #4 \n\t"
 800049c:	f01e 0f04 	tst.w	lr, #4
 80004a0:	bf0c      	ite	eq
 80004a2:	f3ef 8008 	mrseq	r0, MSP
 80004a6:	f3ef 8009 	mrsne	r0, PSP
 80004aa:	f000 ba7b 	b.w	80009a4 <OS_SVC_Handler>
			"ITE EQ \n\t"	//To execute Thumb instructions conditionally, you can either use an IT instruction, or a conditional branch instruction
			"mrseq r0,MSP \n\t"
			"mrsne r0,PSP \n\t"
			"B OS_SVC_Handler");
}
 80004ae:	bf00      	nop

080004b0 <HAL_init>:

/**************************************************************
------------------ APIs Functions Definitions  -----------------
 ***************************************************************/
void HAL_init()
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
	/* Init HW */
	/* Clock Tree */
	/* RCC Default values makes CPU clock & SysTick Timer clock = 8 MHz */

	// Decrease PendSV interrupt priority to be smaller or equal to sysTick priority (=14)
	__NVIC_SetPriority(PendSV_IRQn, 15);
 80004b4:	210f      	movs	r1, #15
 80004b6:	f06f 0001 	mvn.w	r0, #1
 80004ba:	f7ff ff97 	bl	80003ec <__NVIC_SetPriority>

}
 80004be:	bf00      	nop
 80004c0:	bd80      	pop	{r7, pc}
	...

080004c4 <Trigger_OS_PendSV>:

void Trigger_OS_PendSV()
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 80004c8:	4b04      	ldr	r3, [pc, #16]	; (80004dc <Trigger_OS_PendSV+0x18>)
 80004ca:	685b      	ldr	r3, [r3, #4]
 80004cc:	4a03      	ldr	r2, [pc, #12]	; (80004dc <Trigger_OS_PendSV+0x18>)
 80004ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004d2:	6053      	str	r3, [r2, #4]
}
 80004d4:	bf00      	nop
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bc80      	pop	{r7}
 80004da:	4770      	bx	lr
 80004dc:	e000ed00 	.word	0xe000ed00

080004e0 <Start_Ticker>:
 * @param [in]	-
 * @retval 		- none
 * Note			-
 */
void Start_Ticker()
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
	SysTick_Config(8000);
 80004e4:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80004e8:	f7ff ffaa 	bl	8000440 <SysTick_Config>
}
 80004ec:	bf00      	nop
 80004ee:	bd80      	pop	{r7, pc}

080004f0 <SysTick_Handler>:

/*************************************************************
------------------------ ISR Functions  -----------------------
 **************************************************************/
void SysTick_Handler(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
	SysTickLED ^= 1;
 80004f4:	4b06      	ldr	r3, [pc, #24]	; (8000510 <SysTick_Handler+0x20>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	f083 0301 	eor.w	r3, r3, #1
 80004fc:	b2da      	uxtb	r2, r3
 80004fe:	4b04      	ldr	r3, [pc, #16]	; (8000510 <SysTick_Handler+0x20>)
 8000500:	701a      	strb	r2, [r3, #0]

	//1. Determine Pcurrent & Pnext
	Decide_What_Next();
 8000502:	f000 f9fd 	bl	8000900 <Decide_What_Next>

	//2. Switch Context & restore
	Trigger_OS_PendSV();
 8000506:	f7ff ffdd 	bl	80004c4 <Trigger_OS_PendSV>
}
 800050a:	bf00      	nop
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	2000013d 	.word	0x2000013d

08000514 <PendSV_Handler>:

__attribute ((naked)) void PendSV_Handler()
{
	/* Save The Context of Current Task */
	// 1. Get the current task (current PSP from CPU Registers)
	OS_GET_PSP(S_OS_CONTROL.CurrentTask->Current_PSP);
 8000514:	4b6c      	ldr	r3, [pc, #432]	; (80006c8 <PendSV_Handler+0x1b4>)
 8000516:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800051a:	f3ef 8009 	mrs	r0, PSP
 800051e:	4602      	mov	r2, r0
 8000520:	635a      	str	r2, [r3, #52]	; 0x34

	// 2. Use Current PSP to Store (r4:r11)
	S_OS_CONTROL.CurrentTask->Current_PSP--;
 8000522:	4b69      	ldr	r3, [pc, #420]	; (80006c8 <PendSV_Handler+0x1b4>)
 8000524:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000528:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800052a:	3a04      	subs	r2, #4
 800052c:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("mov %0, r4 " : "=r" (*(S_OS_CONTROL.CurrentTask->Current_PSP)));
 800052e:	4b66      	ldr	r3, [pc, #408]	; (80006c8 <PendSV_Handler+0x1b4>)
 8000530:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000536:	4622      	mov	r2, r4
 8000538:	601a      	str	r2, [r3, #0]
	S_OS_CONTROL.CurrentTask->Current_PSP--;
 800053a:	4b63      	ldr	r3, [pc, #396]	; (80006c8 <PendSV_Handler+0x1b4>)
 800053c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000540:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000542:	3a04      	subs	r2, #4
 8000544:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("mov %0, r5 " : "=r" (*(S_OS_CONTROL.CurrentTask->Current_PSP)));
 8000546:	4b60      	ldr	r3, [pc, #384]	; (80006c8 <PendSV_Handler+0x1b4>)
 8000548:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800054c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800054e:	462a      	mov	r2, r5
 8000550:	601a      	str	r2, [r3, #0]
	S_OS_CONTROL.CurrentTask->Current_PSP--;
 8000552:	4b5d      	ldr	r3, [pc, #372]	; (80006c8 <PendSV_Handler+0x1b4>)
 8000554:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000558:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800055a:	3a04      	subs	r2, #4
 800055c:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("mov %0, r6 " : "=r" (*(S_OS_CONTROL.CurrentTask->Current_PSP)));
 800055e:	4b5a      	ldr	r3, [pc, #360]	; (80006c8 <PendSV_Handler+0x1b4>)
 8000560:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000566:	4632      	mov	r2, r6
 8000568:	601a      	str	r2, [r3, #0]
	S_OS_CONTROL.CurrentTask->Current_PSP--;
 800056a:	4b57      	ldr	r3, [pc, #348]	; (80006c8 <PendSV_Handler+0x1b4>)
 800056c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000570:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000572:	3a04      	subs	r2, #4
 8000574:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("mov %0, r7 " : "=r" (*(S_OS_CONTROL.CurrentTask->Current_PSP)));
 8000576:	4b54      	ldr	r3, [pc, #336]	; (80006c8 <PendSV_Handler+0x1b4>)
 8000578:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800057c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800057e:	463a      	mov	r2, r7
 8000580:	601a      	str	r2, [r3, #0]
	S_OS_CONTROL.CurrentTask->Current_PSP--;
 8000582:	4b51      	ldr	r3, [pc, #324]	; (80006c8 <PendSV_Handler+0x1b4>)
 8000584:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000588:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800058a:	3a04      	subs	r2, #4
 800058c:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("mov %0, r8 " : "=r" (*(S_OS_CONTROL.CurrentTask->Current_PSP)));
 800058e:	4b4e      	ldr	r3, [pc, #312]	; (80006c8 <PendSV_Handler+0x1b4>)
 8000590:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000596:	4642      	mov	r2, r8
 8000598:	601a      	str	r2, [r3, #0]
	S_OS_CONTROL.CurrentTask->Current_PSP--;
 800059a:	4b4b      	ldr	r3, [pc, #300]	; (80006c8 <PendSV_Handler+0x1b4>)
 800059c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80005a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005a2:	3a04      	subs	r2, #4
 80005a4:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("mov %0, r9 " : "=r" (*(S_OS_CONTROL.CurrentTask->Current_PSP)));
 80005a6:	4b48      	ldr	r3, [pc, #288]	; (80006c8 <PendSV_Handler+0x1b4>)
 80005a8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80005ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005ae:	464a      	mov	r2, r9
 80005b0:	601a      	str	r2, [r3, #0]
	S_OS_CONTROL.CurrentTask->Current_PSP--;
 80005b2:	4b45      	ldr	r3, [pc, #276]	; (80006c8 <PendSV_Handler+0x1b4>)
 80005b4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80005b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005ba:	3a04      	subs	r2, #4
 80005bc:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("mov %0, r10 " : "=r" (*(S_OS_CONTROL.CurrentTask->Current_PSP)));
 80005be:	4b42      	ldr	r3, [pc, #264]	; (80006c8 <PendSV_Handler+0x1b4>)
 80005c0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80005c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005c6:	4652      	mov	r2, sl
 80005c8:	601a      	str	r2, [r3, #0]
	S_OS_CONTROL.CurrentTask->Current_PSP--;
 80005ca:	4b3f      	ldr	r3, [pc, #252]	; (80006c8 <PendSV_Handler+0x1b4>)
 80005cc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80005d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005d2:	3a04      	subs	r2, #4
 80005d4:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("mov %0, r11 " : "=r" (*(S_OS_CONTROL.CurrentTask->Current_PSP)));
 80005d6:	4b3c      	ldr	r3, [pc, #240]	; (80006c8 <PendSV_Handler+0x1b4>)
 80005d8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80005dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005de:	465a      	mov	r2, fp
 80005e0:	601a      	str	r2, [r3, #0]


	/* Restore the context of the next task */
	//1. Set next Task as Current task
	S_OS_CONTROL.CurrentTask = S_OS_CONTROL.NextTask;
 80005e2:	4b39      	ldr	r3, [pc, #228]	; (80006c8 <PendSV_Handler+0x1b4>)
 80005e4:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80005e8:	4a37      	ldr	r2, [pc, #220]	; (80006c8 <PendSV_Handler+0x1b4>)
 80005ea:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
	S_OS_CONTROL.NextTask = NULL;
 80005ee:	4b36      	ldr	r3, [pc, #216]	; (80006c8 <PendSV_Handler+0x1b4>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4

	//2. Restore Context for the task
	__asm volatile("mov r11,%0 " : : "r" (*(S_OS_CONTROL.CurrentTask->Current_PSP)));
 80005f6:	4b34      	ldr	r3, [pc, #208]	; (80006c8 <PendSV_Handler+0x1b4>)
 80005f8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80005fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	469b      	mov	fp, r3
	S_OS_CONTROL.CurrentTask->Current_PSP++;
 8000602:	4b31      	ldr	r3, [pc, #196]	; (80006c8 <PendSV_Handler+0x1b4>)
 8000604:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000608:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800060a:	3204      	adds	r2, #4
 800060c:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("mov r10,%0 " : : "r" (*(S_OS_CONTROL.CurrentTask->Current_PSP)));
 800060e:	4b2e      	ldr	r3, [pc, #184]	; (80006c8 <PendSV_Handler+0x1b4>)
 8000610:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	469a      	mov	sl, r3
	S_OS_CONTROL.CurrentTask->Current_PSP++;
 800061a:	4b2b      	ldr	r3, [pc, #172]	; (80006c8 <PendSV_Handler+0x1b4>)
 800061c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000620:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000622:	3204      	adds	r2, #4
 8000624:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("mov r9,%0 " : : "r" (*(S_OS_CONTROL.CurrentTask->Current_PSP)));
 8000626:	4b28      	ldr	r3, [pc, #160]	; (80006c8 <PendSV_Handler+0x1b4>)
 8000628:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800062c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4699      	mov	r9, r3
	S_OS_CONTROL.CurrentTask->Current_PSP++;
 8000632:	4b25      	ldr	r3, [pc, #148]	; (80006c8 <PendSV_Handler+0x1b4>)
 8000634:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000638:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800063a:	3204      	adds	r2, #4
 800063c:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("mov r8,%0 " : : "r" (*(S_OS_CONTROL.CurrentTask->Current_PSP)));
 800063e:	4b22      	ldr	r3, [pc, #136]	; (80006c8 <PendSV_Handler+0x1b4>)
 8000640:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4698      	mov	r8, r3
	S_OS_CONTROL.CurrentTask->Current_PSP++;
 800064a:	4b1f      	ldr	r3, [pc, #124]	; (80006c8 <PendSV_Handler+0x1b4>)
 800064c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000650:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000652:	3204      	adds	r2, #4
 8000654:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("mov r7,%0 " : : "r" (*(S_OS_CONTROL.CurrentTask->Current_PSP)));
 8000656:	4b1c      	ldr	r3, [pc, #112]	; (80006c8 <PendSV_Handler+0x1b4>)
 8000658:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800065c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	461f      	mov	r7, r3
	S_OS_CONTROL.CurrentTask->Current_PSP++;
 8000662:	4b19      	ldr	r3, [pc, #100]	; (80006c8 <PendSV_Handler+0x1b4>)
 8000664:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000668:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800066a:	3204      	adds	r2, #4
 800066c:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("mov r6,%0 " : : "r" (*(S_OS_CONTROL.CurrentTask->Current_PSP)));
 800066e:	4b16      	ldr	r3, [pc, #88]	; (80006c8 <PendSV_Handler+0x1b4>)
 8000670:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	461e      	mov	r6, r3
	S_OS_CONTROL.CurrentTask->Current_PSP++;
 800067a:	4b13      	ldr	r3, [pc, #76]	; (80006c8 <PendSV_Handler+0x1b4>)
 800067c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000680:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000682:	3204      	adds	r2, #4
 8000684:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("mov r5,%0 " : : "r" (*(S_OS_CONTROL.CurrentTask->Current_PSP)));
 8000686:	4b10      	ldr	r3, [pc, #64]	; (80006c8 <PendSV_Handler+0x1b4>)
 8000688:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800068c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	461d      	mov	r5, r3
	S_OS_CONTROL.CurrentTask->Current_PSP++;
 8000692:	4b0d      	ldr	r3, [pc, #52]	; (80006c8 <PendSV_Handler+0x1b4>)
 8000694:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000698:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800069a:	3204      	adds	r2, #4
 800069c:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("mov r4,%0 " : : "r" (*(S_OS_CONTROL.CurrentTask->Current_PSP)));
 800069e:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <PendSV_Handler+0x1b4>)
 80006a0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80006a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	461c      	mov	r4, r3
	S_OS_CONTROL.CurrentTask->Current_PSP++;
 80006aa:	4b07      	ldr	r3, [pc, #28]	; (80006c8 <PendSV_Handler+0x1b4>)
 80006ac:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80006b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006b2:	3204      	adds	r2, #4
 80006b4:	635a      	str	r2, [r3, #52]	; 0x34

	//3. Update PSP and Exit
	OS_SET_PSP(S_OS_CONTROL.CurrentTask->Current_PSP);
 80006b6:	4b04      	ldr	r3, [pc, #16]	; (80006c8 <PendSV_Handler+0x1b4>)
 80006b8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80006bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006be:	4618      	mov	r0, r3
 80006c0:	f380 8809 	msr	PSP, r0
	__asm volatile ("BX LR");
 80006c4:	4770      	bx	lr

}
 80006c6:	bf00      	nop
 80006c8:	200002e4 	.word	0x200002e4

080006cc <RTOS_Create_MainStack>:

	}
}

void RTOS_Create_MainStack(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
	S_OS_CONTROL._S_MSP_Task = &_estack;
 80006d0:	4a0b      	ldr	r2, [pc, #44]	; (8000700 <RTOS_Create_MainStack+0x34>)
 80006d2:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <RTOS_Create_MainStack+0x38>)
 80006d4:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	S_OS_CONTROL._E_MSP_Task = S_OS_CONTROL._S_MSP_Task - MainStackSize;
 80006d8:	4b0a      	ldr	r3, [pc, #40]	; (8000704 <RTOS_Create_MainStack+0x38>)
 80006da:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 80006de:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 80006e2:	4a08      	ldr	r2, [pc, #32]	; (8000704 <RTOS_Create_MainStack+0x38>)
 80006e4:	f8c2 3194 	str.w	r3, [r2, #404]	; 0x194

	//Allign 8 Bytes spaces between Main Stack and PSP tasks
	S_OS_CONTROL.PSP_Task_Locator = (S_OS_CONTROL._E_MSP_Task - 8);
 80006e8:	4b06      	ldr	r3, [pc, #24]	; (8000704 <RTOS_Create_MainStack+0x38>)
 80006ea:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80006ee:	3b08      	subs	r3, #8
 80006f0:	4a04      	ldr	r2, [pc, #16]	; (8000704 <RTOS_Create_MainStack+0x38>)
 80006f2:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

	/* Optional */
	// if(S_OS_CONTROL._E_MSP_Task  < &_eheap) Error: exceeded the available stack size
}
 80006f6:	bf00      	nop
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bc80      	pop	{r7}
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	20002800 	.word	0x20002800
 8000704:	200002e4 	.word	0x200002e4

08000708 <RTOS_Create_TaskStack>:


void RTOS_Create_TaskStack(Task_t* Tref)
{
 8000708:	b480      	push	{r7}
 800070a:	b085      	sub	sp, #20
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
	 * r8
	 * r9
	 * r10
	 * r11
	 */
	Tref->Current_PSP = Tref->_S_PSP_Task;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000714:	461a      	mov	r2, r3
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	635a      	str	r2, [r3, #52]	; 0x34

	Tref->Current_PSP--;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800071e:	1f1a      	subs	r2, r3, #4
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	635a      	str	r2, [r3, #52]	; 0x34
	*(Tref->Current_PSP) = 0x1000000; //DUMMY XPSR: T = 1 to avoid Bus Fault
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000728:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800072c:	601a      	str	r2, [r3, #0]

	Tref->Current_PSP--;
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000732:	1f1a      	subs	r2, r3, #4
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	635a      	str	r2, [r3, #52]	; 0x34
	*(Tref->Current_PSP) = (unsigned int) Tref->pTaskEntry; //PC
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000740:	601a      	str	r2, [r3, #0]

	Tref->Current_PSP--;
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000746:	1f1a      	subs	r2, r3, #4
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	635a      	str	r2, [r3, #52]	; 0x34
	*(Tref->Current_PSP) = 0xFFFFFFFD; //LR
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000750:	f06f 0202 	mvn.w	r2, #2
 8000754:	601a      	str	r2, [r3, #0]

	// ri
	for(int i=0; i<13; i++)
 8000756:	2300      	movs	r3, #0
 8000758:	60fb      	str	r3, [r7, #12]
 800075a:	e00b      	b.n	8000774 <RTOS_Create_TaskStack+0x6c>
	{
		Tref->Current_PSP--;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000760:	1f1a      	subs	r2, r3, #4
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	635a      	str	r2, [r3, #52]	; 0x34
		*(Tref->Current_PSP) = 0; //LR
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
	for(int i=0; i<13; i++)
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	3301      	adds	r3, #1
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	2b0c      	cmp	r3, #12
 8000778:	ddf0      	ble.n	800075c <RTOS_Create_TaskStack+0x54>
	}
}
 800077a:	bf00      	nop
 800077c:	3714      	adds	r7, #20
 800077e:	46bd      	mov	sp, r7
 8000780:	bc80      	pop	{r7}
 8000782:	4770      	bx	lr

08000784 <RTOS_IdleTask>:

void RTOS_IdleTask(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
	while(1)
	{
		IdleTaskLED ^= 1;
 8000788:	4b04      	ldr	r3, [pc, #16]	; (800079c <RTOS_IdleTask+0x18>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	f083 0301 	eor.w	r3, r3, #1
 8000790:	b2da      	uxtb	r2, r3
 8000792:	4b02      	ldr	r3, [pc, #8]	; (800079c <RTOS_IdleTask+0x18>)
 8000794:	701a      	strb	r2, [r3, #0]
		__asm("wfe");
 8000796:	bf20      	wfe
		IdleTaskLED ^= 1;
 8000798:	e7f6      	b.n	8000788 <RTOS_IdleTask+0x4>
 800079a:	bf00      	nop
 800079c:	20000490 	.word	0x20000490

080007a0 <Bubble_Sort>:
	}
}

/* Handler Mode */
void Bubble_Sort()
{
 80007a0:	b480      	push	{r7}
 80007a2:	b085      	sub	sp, #20
 80007a4:	af00      	add	r7, sp, #0
	unsigned int i,j,n;
	Task_t* temp;
	n = S_OS_CONTROL.NoofActiveTasks;
 80007a6:	4b21      	ldr	r3, [pc, #132]	; (800082c <Bubble_Sort+0x8c>)
 80007a8:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 80007ac:	607b      	str	r3, [r7, #4]
	for(i = 0; i < n-1; i++)
 80007ae:	2300      	movs	r3, #0
 80007b0:	60fb      	str	r3, [r7, #12]
 80007b2:	e030      	b.n	8000816 <Bubble_Sort+0x76>
		//Last i elements are already in place
		for(j=0; j<n-i-1; j++)
 80007b4:	2300      	movs	r3, #0
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	e023      	b.n	8000802 <Bubble_Sort+0x62>
			if(S_OS_CONTROL.OSTasks[j]->Priority > S_OS_CONTROL.OSTasks[j+1]->Priority)
 80007ba:	4a1c      	ldr	r2, [pc, #112]	; (800082c <Bubble_Sort+0x8c>)
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	3301      	adds	r3, #1
 80007c8:	4918      	ldr	r1, [pc, #96]	; (800082c <Bubble_Sort+0x8c>)
 80007ca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007d0:	429a      	cmp	r2, r3
 80007d2:	d913      	bls.n	80007fc <Bubble_Sort+0x5c>
			{
				temp = S_OS_CONTROL.OSTasks[j];
 80007d4:	4a15      	ldr	r2, [pc, #84]	; (800082c <Bubble_Sort+0x8c>)
 80007d6:	68bb      	ldr	r3, [r7, #8]
 80007d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007dc:	603b      	str	r3, [r7, #0]
				S_OS_CONTROL.OSTasks[j] = S_OS_CONTROL.OSTasks[j+1];
 80007de:	68bb      	ldr	r3, [r7, #8]
 80007e0:	3301      	adds	r3, #1
 80007e2:	4a12      	ldr	r2, [pc, #72]	; (800082c <Bubble_Sort+0x8c>)
 80007e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007e8:	4910      	ldr	r1, [pc, #64]	; (800082c <Bubble_Sort+0x8c>)
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				S_OS_CONTROL.OSTasks[j+1] = temp;
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	3301      	adds	r3, #1
 80007f4:	490d      	ldr	r1, [pc, #52]	; (800082c <Bubble_Sort+0x8c>)
 80007f6:	683a      	ldr	r2, [r7, #0]
 80007f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(j=0; j<n-i-1; j++)
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	3301      	adds	r3, #1
 8000800:	60bb      	str	r3, [r7, #8]
 8000802:	687a      	ldr	r2, [r7, #4]
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	1ad3      	subs	r3, r2, r3
 8000808:	3b01      	subs	r3, #1
 800080a:	68ba      	ldr	r2, [r7, #8]
 800080c:	429a      	cmp	r2, r3
 800080e:	d3d4      	bcc.n	80007ba <Bubble_Sort+0x1a>
	for(i = 0; i < n-1; i++)
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	3301      	adds	r3, #1
 8000814:	60fb      	str	r3, [r7, #12]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	3b01      	subs	r3, #1
 800081a:	68fa      	ldr	r2, [r7, #12]
 800081c:	429a      	cmp	r2, r3
 800081e:	d3c9      	bcc.n	80007b4 <Bubble_Sort+0x14>
			}
}
 8000820:	bf00      	nop
 8000822:	3714      	adds	r7, #20
 8000824:	46bd      	mov	sp, r7
 8000826:	bc80      	pop	{r7}
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	200002e4 	.word	0x200002e4

08000830 <RTOS_Update_Schedular_Table>:

/* Handler Mode */
void RTOS_Update_Schedular_Table()
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0
	int i=0;
 8000836:	2300      	movs	r3, #0
 8000838:	60fb      	str	r3, [r7, #12]
	Task_t* temp = NULL;
 800083a:	2300      	movs	r3, #0
 800083c:	603b      	str	r3, [r7, #0]
	Task_t* PTask;
	Task_t* PNextTask;

	//1. Bubble Sort OSTask[100] (Sch. Table) based on Priority
	Bubble_Sort();
 800083e:	f7ff ffaf 	bl	80007a0 <Bubble_Sort>

	//2. Free REQDY QUEUE
	while(FIFO_Dequeue(&Glob_Ready_Queue, &temp) != FIFO_EMPTY);
 8000842:	bf00      	nop
 8000844:	463b      	mov	r3, r7
 8000846:	4619      	mov	r1, r3
 8000848:	482b      	ldr	r0, [pc, #172]	; (80008f8 <RTOS_Update_Schedular_Table+0xc8>)
 800084a:	f000 fa21 	bl	8000c90 <FIFO_Dequeue>
 800084e:	4603      	mov	r3, r0
 8000850:	2b02      	cmp	r3, #2
 8000852:	d1f7      	bne.n	8000844 <RTOS_Update_Schedular_Table+0x14>

	//3. Update READY QUEUE
	while(i < S_OS_CONTROL.NoofActiveTasks)
 8000854:	e044      	b.n	80008e0 <RTOS_Update_Schedular_Table+0xb0>
	{
		PTask = S_OS_CONTROL.OSTasks[i];
 8000856:	4a29      	ldr	r2, [pc, #164]	; (80008fc <RTOS_Update_Schedular_Table+0xcc>)
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800085e:	60bb      	str	r3, [r7, #8]
		PNextTask = S_OS_CONTROL.OSTasks[i+1];
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	3301      	adds	r3, #1
 8000864:	4a25      	ldr	r2, [pc, #148]	; (80008fc <RTOS_Update_Schedular_Table+0xcc>)
 8000866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800086a:	607b      	str	r3, [r7, #4]

		if(PTask->TaskState != Suspend)
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000872:	2b00      	cmp	r3, #0
 8000874:	d031      	beq.n	80008da <RTOS_Update_Schedular_Table+0xaa>
		{
			// in case we reached to the end of available OSTasks or
			if(PNextTask->TaskState == Suspend)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800087c:	2b00      	cmp	r3, #0
 800087e:	d108      	bne.n	8000892 <RTOS_Update_Schedular_Table+0x62>
			{
				FIFO_Enqueue(&Glob_Ready_Queue, PTask);
 8000880:	68b9      	ldr	r1, [r7, #8]
 8000882:	481d      	ldr	r0, [pc, #116]	; (80008f8 <RTOS_Update_Schedular_Table+0xc8>)
 8000884:	f000 f9c2 	bl	8000c0c <FIFO_Enqueue>
				PTask->TaskState = Ready;
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	2202      	movs	r2, #2
 800088c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
				// get out the loop
				break;
 8000890:	e02e      	b.n	80008f0 <RTOS_Update_Schedular_Table+0xc0>
			}
			// if the PTask priority higher than PNextTask
			if(PTask->Priority < PNextTask->Priority)
 8000892:	68bb      	ldr	r3, [r7, #8]
 8000894:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800089a:	429a      	cmp	r2, r3
 800089c:	d208      	bcs.n	80008b0 <RTOS_Update_Schedular_Table+0x80>
			{
				FIFO_Enqueue(&Glob_Ready_Queue, PTask);
 800089e:	68b9      	ldr	r1, [r7, #8]
 80008a0:	4815      	ldr	r0, [pc, #84]	; (80008f8 <RTOS_Update_Schedular_Table+0xc8>)
 80008a2:	f000 f9b3 	bl	8000c0c <FIFO_Enqueue>
				PTask->TaskState = Ready;
 80008a6:	68bb      	ldr	r3, [r7, #8]
 80008a8:	2202      	movs	r2, #2
 80008aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
				// get out the loop
				break;
 80008ae:	e01f      	b.n	80008f0 <RTOS_Update_Schedular_Table+0xc0>
			}
			// both has the same priority
			else if(PTask->Priority == PNextTask->Priority)
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008b8:	429a      	cmp	r2, r3
 80008ba:	d108      	bne.n	80008ce <RTOS_Update_Schedular_Table+0x9e>
			{
				//	if the Ptask priority == nexttask then
				//		push Ptask to ready state
				//	And make the ptask = nexttask  and nexttask++
				FIFO_Enqueue(&Glob_Ready_Queue, PTask);
 80008bc:	68b9      	ldr	r1, [r7, #8]
 80008be:	480e      	ldr	r0, [pc, #56]	; (80008f8 <RTOS_Update_Schedular_Table+0xc8>)
 80008c0:	f000 f9a4 	bl	8000c0c <FIFO_Enqueue>
				PTask->TaskState = Ready;
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	2202      	movs	r2, #2
 80008c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80008cc:	e005      	b.n	80008da <RTOS_Update_Schedular_Table+0xaa>
			}
			else if (PTask->Priority > PNextTask->Priority)
 80008ce:	68bb      	ldr	r3, [r7, #8]
 80008d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008d6:	429a      	cmp	r2, r3
 80008d8:	d809      	bhi.n	80008ee <RTOS_Update_Schedular_Table+0xbe>
			{
				//not allowed to happen as we already reordered it by bubble sort
				break ;
			}
		}
		i++;
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	3301      	adds	r3, #1
 80008de:	60fb      	str	r3, [r7, #12]
	while(i < S_OS_CONTROL.NoofActiveTasks)
 80008e0:	4b06      	ldr	r3, [pc, #24]	; (80008fc <RTOS_Update_Schedular_Table+0xcc>)
 80008e2:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	429a      	cmp	r2, r3
 80008ea:	d8b4      	bhi.n	8000856 <RTOS_Update_Schedular_Table+0x26>
	}
}
 80008ec:	e000      	b.n	80008f0 <RTOS_Update_Schedular_Table+0xc0>
				break ;
 80008ee:	bf00      	nop
}
 80008f0:	bf00      	nop
 80008f2:	3710      	adds	r7, #16
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	20000140 	.word	0x20000140
 80008fc:	200002e4 	.word	0x200002e4

08000900 <Decide_What_Next>:

/* Handler Mode */
void Decide_What_Next()
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
	// 1. Check if QUEUE is EMBTY && CurrentTask State is suspended
	if(Glob_Ready_Queue.counter == 0 && S_OS_CONTROL.CurrentTask->TaskState != Suspend)
 8000904:	4b24      	ldr	r3, [pc, #144]	; (8000998 <Decide_What_Next+0x98>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d11a      	bne.n	8000942 <Decide_What_Next+0x42>
 800090c:	4b23      	ldr	r3, [pc, #140]	; (800099c <Decide_What_Next+0x9c>)
 800090e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000912:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000916:	2b00      	cmp	r3, #0
 8000918:	d013      	beq.n	8000942 <Decide_What_Next+0x42>
	{
		// So continue running the same Task
		S_OS_CONTROL.CurrentTask->TaskState = Running;
 800091a:	4b20      	ldr	r3, [pc, #128]	; (800099c <Decide_What_Next+0x9c>)
 800091c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000920:	2203      	movs	r2, #3
 8000922:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

		// Add the current task again to the QUEUE [Round Robin]
		FIFO_Enqueue(&Glob_Ready_Queue, S_OS_CONTROL.CurrentTask);
 8000926:	4b1d      	ldr	r3, [pc, #116]	; (800099c <Decide_What_Next+0x9c>)
 8000928:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800092c:	4619      	mov	r1, r3
 800092e:	481a      	ldr	r0, [pc, #104]	; (8000998 <Decide_What_Next+0x98>)
 8000930:	f000 f96c 	bl	8000c0c <FIFO_Enqueue>

		// Set Next task = Current task
		S_OS_CONTROL.NextTask = S_OS_CONTROL.CurrentTask;
 8000934:	4b19      	ldr	r3, [pc, #100]	; (800099c <Decide_What_Next+0x9c>)
 8000936:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800093a:	4a18      	ldr	r2, [pc, #96]	; (800099c <Decide_What_Next+0x9c>)
 800093c:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
		{
			FIFO_Enqueue(&Glob_Ready_Queue, S_OS_CONTROL.CurrentTask);
			S_OS_CONTROL.CurrentTask->TaskState = Ready;
		}
	}
}
 8000940:	e027      	b.n	8000992 <Decide_What_Next+0x92>
		FIFO_Dequeue(&Glob_Ready_Queue, &S_OS_CONTROL.NextTask);
 8000942:	4917      	ldr	r1, [pc, #92]	; (80009a0 <Decide_What_Next+0xa0>)
 8000944:	4814      	ldr	r0, [pc, #80]	; (8000998 <Decide_What_Next+0x98>)
 8000946:	f000 f9a3 	bl	8000c90 <FIFO_Dequeue>
		S_OS_CONTROL.NextTask->TaskState = Running;
 800094a:	4b14      	ldr	r3, [pc, #80]	; (800099c <Decide_What_Next+0x9c>)
 800094c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000950:	2203      	movs	r2, #3
 8000952:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		if((S_OS_CONTROL.CurrentTask->Priority == S_OS_CONTROL.NextTask->Priority) && (S_OS_CONTROL.CurrentTask->TaskState != Suspend))
 8000956:	4b11      	ldr	r3, [pc, #68]	; (800099c <Decide_What_Next+0x9c>)
 8000958:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800095c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800095e:	4b0f      	ldr	r3, [pc, #60]	; (800099c <Decide_What_Next+0x9c>)
 8000960:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000966:	429a      	cmp	r2, r3
 8000968:	d113      	bne.n	8000992 <Decide_What_Next+0x92>
 800096a:	4b0c      	ldr	r3, [pc, #48]	; (800099c <Decide_What_Next+0x9c>)
 800096c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000970:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000974:	2b00      	cmp	r3, #0
 8000976:	d00c      	beq.n	8000992 <Decide_What_Next+0x92>
			FIFO_Enqueue(&Glob_Ready_Queue, S_OS_CONTROL.CurrentTask);
 8000978:	4b08      	ldr	r3, [pc, #32]	; (800099c <Decide_What_Next+0x9c>)
 800097a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800097e:	4619      	mov	r1, r3
 8000980:	4805      	ldr	r0, [pc, #20]	; (8000998 <Decide_What_Next+0x98>)
 8000982:	f000 f943 	bl	8000c0c <FIFO_Enqueue>
			S_OS_CONTROL.CurrentTask->TaskState = Ready;
 8000986:	4b05      	ldr	r3, [pc, #20]	; (800099c <Decide_What_Next+0x9c>)
 8000988:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800098c:	2202      	movs	r2, #2
 800098e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20000140 	.word	0x20000140
 800099c:	200002e4 	.word	0x200002e4
 80009a0:	20000488 	.word	0x20000488

080009a4 <OS_SVC_Handler>:

/* Handler Mode */
void OS_SVC_Handler(int* StackFrame)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
	//1. Get SVC Number
	unsigned char SVC_number ;
	SVC_number = *((unsigned char*)(((unsigned char*)StackFrame[6])-2)) ;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	3318      	adds	r3, #24
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	3b02      	subs	r3, #2
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	73fb      	strb	r3, [r7, #15]
	 * i) update Scheduler Table, Read Queue
	 * ii) Check if OS is Running State
	 * 		- Decide what State
	 * 		- Trigger OS_pendSV (Switch Context/Restore)
	 */
	switch(SVC_number)
 80009b8:	7bfb      	ldrb	r3, [r7, #15]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	db1f      	blt.n	80009fe <OS_SVC_Handler+0x5a>
 80009be:	2b01      	cmp	r3, #1
 80009c0:	dd02      	ble.n	80009c8 <OS_SVC_Handler+0x24>
 80009c2:	2b02      	cmp	r3, #2
 80009c4:	d017      	beq.n	80009f6 <OS_SVC_Handler+0x52>
	case SVC_TaskWaitingTime:
		//Update Sch. Table, READY QUEUE
		RTOS_Update_Schedular_Table();
		break;
	}
}
 80009c6:	e01a      	b.n	80009fe <OS_SVC_Handler+0x5a>
		RTOS_Update_Schedular_Table();
 80009c8:	f7ff ff32 	bl	8000830 <RTOS_Update_Schedular_Table>
		if(S_OS_CONTROL.OSModeID == OSrunning)
 80009cc:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <OS_SVC_Handler+0x64>)
 80009ce:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
 80009d2:	2b01      	cmp	r3, #1
 80009d4:	d112      	bne.n	80009fc <OS_SVC_Handler+0x58>
			if(strcmp(S_OS_CONTROL.CurrentTask->TaskName, "IdleTask") != 0)
 80009d6:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <OS_SVC_Handler+0x64>)
 80009d8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80009dc:	3304      	adds	r3, #4
 80009de:	490b      	ldr	r1, [pc, #44]	; (8000a0c <OS_SVC_Handler+0x68>)
 80009e0:	4618      	mov	r0, r3
 80009e2:	f7ff fbc5 	bl	8000170 <strcmp>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d007      	beq.n	80009fc <OS_SVC_Handler+0x58>
				Decide_What_Next();
 80009ec:	f7ff ff88 	bl	8000900 <Decide_What_Next>
				Trigger_OS_PendSV();
 80009f0:	f7ff fd68 	bl	80004c4 <Trigger_OS_PendSV>
		break;
 80009f4:	e002      	b.n	80009fc <OS_SVC_Handler+0x58>
		RTOS_Update_Schedular_Table();
 80009f6:	f7ff ff1b 	bl	8000830 <RTOS_Update_Schedular_Table>
		break;
 80009fa:	e000      	b.n	80009fe <OS_SVC_Handler+0x5a>
		break;
 80009fc:	bf00      	nop
}
 80009fe:	bf00      	nop
 8000a00:	3710      	adds	r7, #16
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	200002e4 	.word	0x200002e4
 8000a0c:	08000d8c 	.word	0x08000d8c

08000a10 <RTOS_OS_SVC_Set>:

/* Thread Mode */
void RTOS_OS_SVC_Set(SVC_ID ID)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	71fb      	strb	r3, [r7, #7]
	switch(ID)
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	2b01      	cmp	r3, #1
 8000a1e:	d006      	beq.n	8000a2e <RTOS_OS_SVC_Set+0x1e>
 8000a20:	2b02      	cmp	r3, #2
 8000a22:	d006      	beq.n	8000a32 <RTOS_OS_SVC_Set+0x22>
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d000      	beq.n	8000a2a <RTOS_OS_SVC_Set+0x1a>
		break;
	case SVC_TaskWaitingTime:
		__asm("svc #0x02");
		break;
	}
}
 8000a28:	e005      	b.n	8000a36 <RTOS_OS_SVC_Set+0x26>
		__asm("svc #0x00");
 8000a2a:	df00      	svc	0
		break;
 8000a2c:	e003      	b.n	8000a36 <RTOS_OS_SVC_Set+0x26>
		__asm("svc #0x01");
 8000a2e:	df01      	svc	1
		break;
 8000a30:	e001      	b.n	8000a36 <RTOS_OS_SVC_Set+0x26>
		__asm("svc #0x02");
 8000a32:	df02      	svc	2
		break;
 8000a34:	bf00      	nop
}
 8000a36:	bf00      	nop
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bc80      	pop	{r7}
 8000a3e:	4770      	bx	lr

08000a40 <RTOS_init>:
 * @param [in]	- none
 * @retval 		- RTOS_Status_t: return a status for the execution of the function call
 * Note			- none
 */
RTOS_ERROR_t RTOS_init()
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
	RTOS_ERROR_t error = RTOS_OK;
 8000a46:	2300      	movs	r3, #0
 8000a48:	71fb      	strb	r3, [r7, #7]

	//1. Update OS mode (OSsuspend)
	S_OS_CONTROL.OSModeID = OSsuspend;
 8000a4a:	4b14      	ldr	r3, [pc, #80]	; (8000a9c <RTOS_init+0x5c>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8

	//2. Specify the MAIN Stack for OS
	RTOS_Create_MainStack();
 8000a52:	f7ff fe3b 	bl	80006cc <RTOS_Create_MainStack>

	//3. create OS Ready Queue
	if(FIFO_Init(&Glob_Ready_Queue, Glob_Ready_Queue_FIFO, READY_FIFO_SIZE) != FIFO_NO_ERROR)
 8000a56:	2264      	movs	r2, #100	; 0x64
 8000a58:	4911      	ldr	r1, [pc, #68]	; (8000aa0 <RTOS_init+0x60>)
 8000a5a:	4812      	ldr	r0, [pc, #72]	; (8000aa4 <RTOS_init+0x64>)
 8000a5c:	f000 f8b4 	bl	8000bc8 <FIFO_Init>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <RTOS_init+0x2a>
	{
		error = READY_QUEUE_INIT_ERROR;
 8000a66:	2304      	movs	r3, #4
 8000a68:	71fb      	strb	r3, [r7, #7]
	}

	//4. Configure Idle task
	strcpy(Glob_Idle_Task.TaskName, "IdleTask");
 8000a6a:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <RTOS_init+0x68>)
 8000a6c:	4a0f      	ldr	r2, [pc, #60]	; (8000aac <RTOS_init+0x6c>)
 8000a6e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a70:	c303      	stmia	r3!, {r0, r1}
 8000a72:	701a      	strb	r2, [r3, #0]
	Glob_Idle_Task.Priority = 255;				// Give it the highest value --> to be the lowest priority
 8000a74:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <RTOS_init+0x70>)
 8000a76:	22ff      	movs	r2, #255	; 0xff
 8000a78:	625a      	str	r2, [r3, #36]	; 0x24
	Glob_Idle_Task.pTaskEntry = RTOS_IdleTask;
 8000a7a:	4b0d      	ldr	r3, [pc, #52]	; (8000ab0 <RTOS_init+0x70>)
 8000a7c:	4a0d      	ldr	r2, [pc, #52]	; (8000ab4 <RTOS_init+0x74>)
 8000a7e:	629a      	str	r2, [r3, #40]	; 0x28
	Glob_Idle_Task.StackSize = 300;				// 300 bytes
 8000a80:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <RTOS_init+0x70>)
 8000a82:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000a86:	601a      	str	r2, [r3, #0]
	error = RTOS_Create_Task(&Glob_Idle_Task);
 8000a88:	4809      	ldr	r0, [pc, #36]	; (8000ab0 <RTOS_init+0x70>)
 8000a8a:	f000 f815 	bl	8000ab8 <RTOS_Create_Task>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	71fb      	strb	r3, [r7, #7]

	return error;
 8000a92:	79fb      	ldrb	r3, [r7, #7]
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	200002e4 	.word	0x200002e4
 8000aa0:	20000154 	.word	0x20000154
 8000aa4:	20000140 	.word	0x20000140
 8000aa8:	20000498 	.word	0x20000498
 8000aac:	08000d8c 	.word	0x08000d8c
 8000ab0:	20000494 	.word	0x20000494
 8000ab4:	08000785 	.word	0x08000785

08000ab8 <RTOS_Create_Task>:
 * @param [in]	- Tref: the passed task parameters to create
 * @retval 		- RTOS_Status_t: return a status for the execution of the function call
 * Note			- none
 */
RTOS_ERROR_t RTOS_Create_Task(Task_t* Tref)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
	RTOS_ERROR_t error = RTOS_OK;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	73fb      	strb	r3, [r7, #15]

	//1. Create its own PSP Stack
	Tref->_S_PSP_Task = S_OS_CONTROL.PSP_Task_Locator;
 8000ac4:	4b15      	ldr	r3, [pc, #84]	; (8000b1c <RTOS_Create_Task+0x64>)
 8000ac6:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	62da      	str	r2, [r3, #44]	; 0x2c
	Tref->_E_PSP_Task = Tref->_S_PSP_Task - Tref->StackSize;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	1ad2      	subs	r2, r2, r3
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	631a      	str	r2, [r3, #48]	; 0x30

	//2. Check if task stack exceeds the PSP stack or not
	//if(Tref->_E_PSP_Task < (unsigned int)(&_eheap));

	//3. Allign 8 bytes space between Task PSP and other
	S_OS_CONTROL.PSP_Task_Locator = Tref->_E_PSP_Task - 8;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae0:	3b08      	subs	r3, #8
 8000ae2:	4a0e      	ldr	r2, [pc, #56]	; (8000b1c <RTOS_Create_Task+0x64>)
 8000ae4:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

	//4. Initialize PSP Task Stack (Task Frame)
	RTOS_Create_TaskStack(Tref);
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	f7ff fe0d 	bl	8000708 <RTOS_Create_TaskStack>

	//5. Update OS Tasks Array and Num. of Active tasks
	S_OS_CONTROL.OSTasks[S_OS_CONTROL.NoofActiveTasks] = Tref;
 8000aee:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <RTOS_Create_Task+0x64>)
 8000af0:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000af4:	4909      	ldr	r1, [pc, #36]	; (8000b1c <RTOS_Create_Task+0x64>)
 8000af6:	687a      	ldr	r2, [r7, #4]
 8000af8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	S_OS_CONTROL.NoofActiveTasks++;
 8000afc:	4b07      	ldr	r3, [pc, #28]	; (8000b1c <RTOS_Create_Task+0x64>)
 8000afe:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000b02:	3301      	adds	r3, #1
 8000b04:	4a05      	ldr	r2, [pc, #20]	; (8000b1c <RTOS_Create_Task+0x64>)
 8000b06:	f8c2 319c 	str.w	r3, [r2, #412]	; 0x19c

	//6. Set task state to suspended
	Tref->TaskState = Suspend;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	return error;
 8000b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3710      	adds	r7, #16
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	200002e4 	.word	0x200002e4

08000b20 <RTOS_Activate_Task>:
 * @param [in]	- Tref: the passed task parameters to Activate
 * @retval 		- RTOS_Status_t: return a status for the execution of the function call
 * Note			- none
 */
RTOS_ERROR_t RTOS_Activate_Task(Task_t* Tref)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
	//1. Set task state = waiting
	Tref->TaskState = Waiting;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	RTOS_OS_SVC_Set(SVC_ActivateTask);
 8000b30:	2000      	movs	r0, #0
 8000b32:	f7ff ff6d 	bl	8000a10 <RTOS_OS_SVC_Set>
}
 8000b36:	bf00      	nop
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <RTOS_Terminate_Task>:
 * @param [in]	- Tref: the passed task parameters to Activate
 * @retval 		- RTOS_Status_t: return a status for the execution of the function call
 * Note			- none
 */
RTOS_ERROR_t RTOS_Terminate_Task(Task_t* Tref)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	//1. Set task state = waiting
	Tref->TaskState = Suspend;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	RTOS_OS_SVC_Set(SVC_TerminateTask);
 8000b50:	2001      	movs	r0, #1
 8000b52:	f7ff ff5d 	bl	8000a10 <RTOS_OS_SVC_Set>
}
 8000b56:	bf00      	nop
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <RTOS_StartOS>:
 * @param [in]	- none
 * @retval 		- RTOS_Status_t: return a status for the execution of the function call
 * Note			- none
 */
RTOS_ERROR_t RTOS_StartOS()
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
	//1. Change OS Mode to running
	S_OS_CONTROL.OSModeID = OSrunning;
 8000b64:	4b16      	ldr	r3, [pc, #88]	; (8000bc0 <RTOS_StartOS+0x60>)
 8000b66:	2201      	movs	r2, #1
 8000b68:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8

	//2. Set Idle Task as Current Task
	S_OS_CONTROL.CurrentTask = &Glob_Idle_Task;
 8000b6c:	4b14      	ldr	r3, [pc, #80]	; (8000bc0 <RTOS_StartOS+0x60>)
 8000b6e:	4a15      	ldr	r2, [pc, #84]	; (8000bc4 <RTOS_StartOS+0x64>)
 8000b70:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0

	//3. Activate Current Task (idle task)
	RTOS_Activate_Task(S_OS_CONTROL.CurrentTask);
 8000b74:	4b12      	ldr	r3, [pc, #72]	; (8000bc0 <RTOS_StartOS+0x60>)
 8000b76:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f7ff ffd0 	bl	8000b20 <RTOS_Activate_Task>

	//4. Start Ticker
	Start_Ticker();
 8000b80:	f7ff fcae 	bl	80004e0 <Start_Ticker>

	//5. Set CPU PSP for Current Task (Idle Task)
	OS_SET_PSP(S_OS_CONTROL.CurrentTask->Current_PSP);
 8000b84:	4b0e      	ldr	r3, [pc, #56]	; (8000bc0 <RTOS_StartOS+0x60>)
 8000b86:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f380 8809 	msr	PSP, r0

	//6. Switch Thread Mode SP (MSP --> PSP) and make it unprivileged
	OS_SWITCH_SP_to_PSP;
 8000b92:	f3ef 8014 	mrs	r0, CONTROL
 8000b96:	f04f 0102 	mov.w	r1, #2
 8000b9a:	ea40 0001 	orr.w	r0, r0, r1
 8000b9e:	f380 8814 	msr	CONTROL, r0
	OS_SWITCH_to_unprivilaged;
 8000ba2:	f3ef 8314 	mrs	r3, CONTROL
 8000ba6:	f043 0301 	orr.w	r3, r3, #1
 8000baa:	f383 8814 	msr	CONTROL, r3

	//7. Call Current Task Function
	S_OS_CONTROL.CurrentTask->pTaskEntry();
 8000bae:	4b04      	ldr	r3, [pc, #16]	; (8000bc0 <RTOS_StartOS+0x60>)
 8000bb0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bb6:	4798      	blx	r3

}
 8000bb8:	bf00      	nop
 8000bba:	4618      	mov	r0, r3
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	200002e4 	.word	0x200002e4
 8000bc4:	20000494 	.word	0x20000494

08000bc8 <FIFO_Init>:
 * @param [in]	- none
 * @retval 		-
 * Note			- none
 */
Buffer_Status FIFO_Init (FIFO_Buf_t* fifo, element_type* buf, unsigned int length)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b085      	sub	sp, #20
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	607a      	str	r2, [r7, #4]
	if(!buf)
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d101      	bne.n	8000bde <FIFO_Init+0x16>
		return FIFO_NULL;
 8000bda:	2303      	movs	r3, #3
 8000bdc:	e011      	b.n	8000c02 <FIFO_Init+0x3a>

	fifo->base = buf;
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	68ba      	ldr	r2, [r7, #8]
 8000be2:	60da      	str	r2, [r3, #12]
	fifo->head = fifo->base;
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	68da      	ldr	r2, [r3, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	605a      	str	r2, [r3, #4]
	fifo->tail = fifo->base;
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	68da      	ldr	r2, [r3, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	609a      	str	r2, [r3, #8]
	fifo->length = length;
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	611a      	str	r2, [r3, #16]
	fifo->counter = 0;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]

	return FIFO_NO_ERROR;
 8000c00:	2300      	movs	r3, #0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3714      	adds	r7, #20
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr

08000c0c <FIFO_Enqueue>:


Buffer_Status FIFO_Enqueue (FIFO_Buf_t* fifo, element_type item)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	6039      	str	r1, [r7, #0]
	/* fifo null */
	if(!fifo->base || !fifo->length)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	68db      	ldr	r3, [r3, #12]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d003      	beq.n	8000c26 <FIFO_Enqueue+0x1a>
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	691b      	ldr	r3, [r3, #16]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d101      	bne.n	8000c2a <FIFO_Enqueue+0x1e>
		return FIFO_NULL;
 8000c26:	2303      	movs	r3, #3
 8000c28:	e02d      	b.n	8000c86 <FIFO_Enqueue+0x7a>

	/* fifo full */
	if((fifo->head == fifo->tail) && (fifo->counter == fifo->length))
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	685a      	ldr	r2, [r3, #4]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	689b      	ldr	r3, [r3, #8]
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d107      	bne.n	8000c46 <FIFO_Enqueue+0x3a>
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	691b      	ldr	r3, [r3, #16]
 8000c3e:	429a      	cmp	r2, r3
 8000c40:	d101      	bne.n	8000c46 <FIFO_Enqueue+0x3a>
		return FIFO_FULL;
 8000c42:	2301      	movs	r3, #1
 8000c44:	e01f      	b.n	8000c86 <FIFO_Enqueue+0x7a>

	/* add item */
	*(fifo->tail) = item;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	689b      	ldr	r3, [r3, #8]
 8000c4a:	683a      	ldr	r2, [r7, #0]
 8000c4c:	601a      	str	r2, [r3, #0]
	fifo->counter++;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	1c5a      	adds	r2, r3, #1
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	601a      	str	r2, [r3, #0]

	/* For Circular fifo again */
	/* circular enqueue */
	if(fifo->tail == (((unsigned int)fifo->base + (4*fifo->length)) - 4 ))
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	689b      	ldr	r3, [r3, #8]
 8000c5c:	687a      	ldr	r2, [r7, #4]
 8000c5e:	68d2      	ldr	r2, [r2, #12]
 8000c60:	4611      	mov	r1, r2
 8000c62:	687a      	ldr	r2, [r7, #4]
 8000c64:	6912      	ldr	r2, [r2, #16]
 8000c66:	0092      	lsls	r2, r2, #2
 8000c68:	440a      	add	r2, r1
 8000c6a:	3a04      	subs	r2, #4
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d104      	bne.n	8000c7a <FIFO_Enqueue+0x6e>
		fifo->tail = fifo->base;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	68da      	ldr	r2, [r3, #12]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	e004      	b.n	8000c84 <FIFO_Enqueue+0x78>
	else
		fifo->tail++;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	689b      	ldr	r3, [r3, #8]
 8000c7e:	1d1a      	adds	r2, r3, #4
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	609a      	str	r2, [r3, #8]

	return FIFO_NO_ERROR;
 8000c84:	2300      	movs	r3, #0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bc80      	pop	{r7}
 8000c8e:	4770      	bx	lr

08000c90 <FIFO_Dequeue>:


Buffer_Status FIFO_Dequeue (FIFO_Buf_t* fifo, element_type* item)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	6039      	str	r1, [r7, #0]
	/* fifo null */
	if(!fifo->base || !fifo->length)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	68db      	ldr	r3, [r3, #12]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d003      	beq.n	8000caa <FIFO_Dequeue+0x1a>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	691b      	ldr	r3, [r3, #16]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d101      	bne.n	8000cae <FIFO_Dequeue+0x1e>
		return FIFO_NULL;
 8000caa:	2303      	movs	r3, #3
 8000cac:	e028      	b.n	8000d00 <FIFO_Dequeue+0x70>

	/* fifo empty */
	if(fifo->head == fifo->tail)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	685a      	ldr	r2, [r3, #4]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	689b      	ldr	r3, [r3, #8]
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	d101      	bne.n	8000cbe <FIFO_Dequeue+0x2e>
		return FIFO_EMPTY;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	e020      	b.n	8000d00 <FIFO_Dequeue+0x70>

	*item = *(fifo->head);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	601a      	str	r2, [r3, #0]
	fifo->counter--;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	1e5a      	subs	r2, r3, #1
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	601a      	str	r2, [r3, #0]

	/* For Circular fifo again */
	/* circular enqueue */
	if(fifo->head == (((unsigned int)fifo->base + (4*fifo->length)) - 4 ))
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	68d2      	ldr	r2, [r2, #12]
 8000cda:	4611      	mov	r1, r2
 8000cdc:	687a      	ldr	r2, [r7, #4]
 8000cde:	6912      	ldr	r2, [r2, #16]
 8000ce0:	0092      	lsls	r2, r2, #2
 8000ce2:	440a      	add	r2, r1
 8000ce4:	3a04      	subs	r2, #4
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d104      	bne.n	8000cf4 <FIFO_Dequeue+0x64>
		fifo->head = fifo->base;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	68da      	ldr	r2, [r3, #12]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	e004      	b.n	8000cfe <FIFO_Dequeue+0x6e>
	else
		fifo->head++;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	1d1a      	adds	r2, r3, #4
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	605a      	str	r2, [r3, #4]

	return FIFO_NO_ERROR;
 8000cfe:	2300      	movs	r3, #0
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bc80      	pop	{r7}
 8000d08:	4770      	bx	lr
	...

08000d0c <__libc_init_array>:
 8000d0c:	b570      	push	{r4, r5, r6, lr}
 8000d0e:	2500      	movs	r5, #0
 8000d10:	4e0c      	ldr	r6, [pc, #48]	; (8000d44 <__libc_init_array+0x38>)
 8000d12:	4c0d      	ldr	r4, [pc, #52]	; (8000d48 <__libc_init_array+0x3c>)
 8000d14:	1ba4      	subs	r4, r4, r6
 8000d16:	10a4      	asrs	r4, r4, #2
 8000d18:	42a5      	cmp	r5, r4
 8000d1a:	d109      	bne.n	8000d30 <__libc_init_array+0x24>
 8000d1c:	f000 f81a 	bl	8000d54 <_init>
 8000d20:	2500      	movs	r5, #0
 8000d22:	4e0a      	ldr	r6, [pc, #40]	; (8000d4c <__libc_init_array+0x40>)
 8000d24:	4c0a      	ldr	r4, [pc, #40]	; (8000d50 <__libc_init_array+0x44>)
 8000d26:	1ba4      	subs	r4, r4, r6
 8000d28:	10a4      	asrs	r4, r4, #2
 8000d2a:	42a5      	cmp	r5, r4
 8000d2c:	d105      	bne.n	8000d3a <__libc_init_array+0x2e>
 8000d2e:	bd70      	pop	{r4, r5, r6, pc}
 8000d30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d34:	4798      	blx	r3
 8000d36:	3501      	adds	r5, #1
 8000d38:	e7ee      	b.n	8000d18 <__libc_init_array+0xc>
 8000d3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d3e:	4798      	blx	r3
 8000d40:	3501      	adds	r5, #1
 8000d42:	e7f2      	b.n	8000d2a <__libc_init_array+0x1e>
 8000d44:	08000d98 	.word	0x08000d98
 8000d48:	08000d98 	.word	0x08000d98
 8000d4c:	08000d98 	.word	0x08000d98
 8000d50:	08000d9c 	.word	0x08000d9c

08000d54 <_init>:
 8000d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d56:	bf00      	nop
 8000d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d5a:	bc08      	pop	{r3}
 8000d5c:	469e      	mov	lr, r3
 8000d5e:	4770      	bx	lr

08000d60 <_fini>:
 8000d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d62:	bf00      	nop
 8000d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d66:	bc08      	pop	{r3}
 8000d68:	469e      	mov	lr, r3
 8000d6a:	4770      	bx	lr
